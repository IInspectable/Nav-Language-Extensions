<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #> 
<#@ assembly name="$(targetdir)Pharmatechnik.Nav.Language.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Pharmatechnik.Nav.Language" #>
<#@ output extension=".cs" #>
//==================================================
// HINWEIS: Diese Datei wurde am <#= DateTime.Now.ToString(new CultureInfo("de-DE"))#>
//			automatisch generiert!
//==================================================
using NUnit.Framework;
using Pharmatechnik.Nav.Language;

namespace Nav.Language.Tests {

	[TestFixture]
	public class ParseEmptyStringTests {
		
<#

	var nodeTypes = FindAllDerivedTypesAndSelf<SyntaxNode>().Where(n=>!n.IsAbstract).OrderBy(nodeType=> nodeType.Name.Length);

	foreach (var nodeType in nodeTypes) {

		var syntaxAttr=SampleSyntaxAttribute.GetAttribute(nodeType);
		
		var methodName=nodeType.Name.Substring(0, nodeType.Name.Length-6);
		var parserMethodName="Parse"+nodeType.Name.Substring(0, nodeType.Name.Length-6);
		var syntaxVarname=Char.ToLower(nodeType.Name[0])+nodeType.Name.Substring(1, nodeType.Name.Length-1);
#>
        // <#=nodeType.Name#>
		[Test]
		public void Test<#= nodeType.Name #>() {
			
<#
    var tokenProps = nodeType.GetProperties(BindingFlags.Public | BindingFlags.Instance)
                             .Where(m => m.PropertyType ==typeof(SyntaxToken)).ToList();

        if(tokenProps.Any()) { #>
        var <#=syntaxVarname#>=Syntax.<#=parserMethodName#>("");
<#        }
        foreach (var prop in tokenProps) {
#>
            // <#=prop.Name#>
            Assert.That(<#=syntaxVarname#>.<#=prop.Name#>.IsMissing, Is.True, "Das Token '{0}' sollte als 'fehlend' gekennzeichnet sein.", <#=syntaxVarname#>.<#=prop.Name#>);
            Assert.That(<#=syntaxVarname#>.<#=prop.Name#>.Extent.IsMissing, Is.True, "Extent des Token '{0}' sollte als 'fehlend' gekennzeichnet sein.", <#=syntaxVarname#>.<#=prop.Name#>);
<#                    
        }
#>		}

<#        
    }

#>
	}
}
<#+

List<Type> FindAllDerivedTypesAndSelf<T>() {
    return FindAllDerivedTypesAndSelf<T>(Assembly.GetAssembly(typeof(T)));
}

List<Type> FindAllDerivedTypesAndSelf<T>(Assembly assembly) {
    var derivedType = typeof(T);
    return assembly.GetTypes()
                    .Where(t => derivedType.IsAssignableFrom(t))
                    .ToList();
}
#>