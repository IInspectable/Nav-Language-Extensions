<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #> 
<#@ assembly name="$(targetdir)Pharmatechnik.Nav.Language.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Pharmatechnik.Nav.Language" #>
<#@ output extension=".cs" #>
//==================================================
// HINWEIS: Diese Datei wurde am <#= DateTime.Now.ToString(new CultureInfo("de-DE"))#>
//			automatisch generiert!
//==================================================
using NUnit.Framework;
using Pharmatechnik.Nav.Language;
using System.Collections.Generic;
using Nav.Language.Tests.Properties;

namespace Nav.Language.Tests {

	public sealed class TestSyntaxNodeWalker: SyntaxNodeWalker {

		public readonly Dictionary<string, bool> MethodsCalled = new Dictionary<string, bool>();

<#
	var nodeTypes = FindAllDerivedTypesAndSelf<SyntaxNode>().Where(n=>!n.IsAbstract).OrderBy(nodeType => nodeType.Name.Length);

	foreach (var nodeType in nodeTypes) {
		var walkerMethodName = "Walk" + nodeType.Name.Substring(0, nodeType.Name.Length-6);
		var arumentName      = Char.ToLower(nodeType.Name[0]) + nodeType.Name.Substring(1);
#>
		// <#= nodeType.Name #>
		public override bool <#= walkerMethodName #>(<#= nodeType.Name #> <#= arumentName#>) { 
			MethodsCalled["<#= walkerMethodName #>"]=true;
			return true; 
		}
		public override void Post<#= walkerMethodName #>(<#= nodeType.Name #> <#= arumentName#>) { 
			MethodsCalled["Post<#= walkerMethodName #>"]=true;
		}
<#        
    }
#>
	}

	[TestFixture]
	public class SyntaxWalkerTests {
		
		public Dictionary<string, bool> MethodsCalled;

		[SetUp]
		public void Setup() {
			var syntaxTree = SyntaxTree.ParseText(Resources.AllRules);
			var walker     = new TestSyntaxNodeWalker();

			walker.Walk(syntaxTree.GetRoot());
			MethodsCalled=walker.MethodsCalled;
		}

<#
	foreach (var nodeType in nodeTypes) {

		var syntaxName       = nodeType.Name.Substring(0, nodeType.Name.Length-6);
		var walkerMethodName = "Walk" + syntaxName;
#>
		// <#= syntaxName #>
		[Test]
		public void Test<#= walkerMethodName #>() {
			Assert.That(MethodsCalled.ContainsKey("<#= walkerMethodName #>"), Is.True, "<#= walkerMethodName #> not called.");	
			Assert.That(MethodsCalled.ContainsKey("Post<#= walkerMethodName #>"), Is.True, "Post<#= walkerMethodName #> not called.");
		}
<#        
    }

#>
	}
}
<#+

List<Type> FindAllDerivedTypesAndSelf<T>() {
    return FindAllDerivedTypesAndSelf<T>(Assembly.GetAssembly(typeof(T)));
}

List<Type> FindAllDerivedTypesAndSelf<T>(Assembly assembly) {
    var derivedType = typeof(T);
    return assembly.GetTypes()
                    .Where(t => derivedType.IsAssignableFrom(t))
                    .ToList();
}
#>