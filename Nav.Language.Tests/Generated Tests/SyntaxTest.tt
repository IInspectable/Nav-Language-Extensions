<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #> 
<#@ assembly name="$(targetdir)Pharmatechnik.Nav.Language.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Pharmatechnik.Nav.Language" #>
<#@ output extension=".cs" #>
//==================================================
// HINWEIS: Diese Datei wurde am <#= DateTime.Now.ToString(new CultureInfo("de-DE"))#>
//			automatisch generiert!
//==================================================
using NUnit.Framework;
using Pharmatechnik.Nav.Language;

namespace Nav.Language.Tests {

	[TestFixture]
	public class SyntaxTests {
		
<#

	var nodeTypes = FindAllDerivedTypesAndSelf<SyntaxNode>().Where(n=>!n.IsAbstract).OrderBy(nodeType=> nodeType.Name.Length);

	foreach (var nodeType in nodeTypes) {

		var syntaxAttr=SampleSyntaxAttribute.GetAttribute(nodeType);
		var description=String.Format("Syntax: '{0}'\\r\\n", (syntaxAttr==null?"":syntaxAttr.Syntax).Replace("\"", "\\\""));
		
		var methodName=nodeType.Name.Substring(0, nodeType.Name.Length-6);
		var parserMethodName="Parse"+nodeType.Name.Substring(0, nodeType.Name.Length-6);
		var syntaxVarname=Char.ToLower(nodeType.Name[0])+nodeType.Name.Substring(1, nodeType.Name.Length-1);
#>
		[Test]
<#
		if(syntaxAttr==null) { 
#>		[Ignore("<#= nodeType.Name #> hat noch kein SampleSyntaxAttribute, oder es wurde keine Beispielsyntax angegeben.")]
<#		}
#>
		[Description("<#=description#>")]
		public void Test<#= nodeType.Name #>() {
			var <#=syntaxVarname#>=Syntax.<#=parserMethodName#>(SampleSyntax.Of<<#=nodeType.Name#>>());
			
			foreach(var diagnostic in <#=syntaxVarname#>.SyntaxTree.Diagnostics) {
				Assert.Fail("Die Beispiels-Syntax führt zu Syntaxfehlern:\r\n{0}", diagnostic);
			}
			Assert.That(<#=syntaxVarname#>.SyntaxTree.Diagnostics.Length, Is.EqualTo(0));
			foreach (var token in <#=syntaxVarname#>.ChildTokens()) {
		        Assert.That(token.IsMissing, Is.False, "Ein Token ist als 'fehlend' gekennzeichnet:\r\n{0}", token);
		    }
		}

<#        
    }

#>
	}
}
<#+

List<Type> FindAllDerivedTypesAndSelf<T>() {
    return FindAllDerivedTypesAndSelf<T>(Assembly.GetAssembly(typeof(T)));
}

List<Type> FindAllDerivedTypesAndSelf<T>(Assembly assembly) {
    var derivedType = typeof(T);
    return assembly.GetTypes()
                    .Where(t => derivedType.IsAssignableFrom(t))
                    .ToList();
}
#>