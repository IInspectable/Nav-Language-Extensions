<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #> 
<#@ assembly name="$(targetdir)Pharmatechnik.Nav.Language.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Pharmatechnik.Nav.Language" #>
<#@ output extension=".cs" #>
//==================================================
// HINWEIS: Diese Datei wurde am <#= DateTime.Now.ToString(new CultureInfo("de-DE"))#>
//			automatisch generiert!
//==================================================
using NUnit.Framework;
using Pharmatechnik.Nav.Language;
using System;
using System.Linq;
using System.Reflection;
using Pharmatechnik.Nav.Language.Internal;
namespace Nav.Language.Tests {

	[TestFixture]
    [Category("Tests noch nicht fertig.")]
	public class TokenPropertyNameTests {
		
<#

	var nodeTypes = FindAllDerivedTypesAndSelf<SyntaxNode>().Where(n=>!n.IsAbstract).OrderBy(nodeType=> nodeType.Name.Length);

	foreach (var nodeType in nodeTypes) {

		var syntaxAttr=SampleSyntaxAttribute.GetAttribute(nodeType);
		
		var methodName=nodeType.Name.Substring(0, nodeType.Name.Length-6);
		var parserMethodName="Parse"+nodeType.Name.Substring(0, nodeType.Name.Length-6);
		var syntaxVarname=Char.ToLower(nodeType.Name[0])+nodeType.Name.Substring(1, nodeType.Name.Length-1);
#>
        // <#=nodeType.Name#>
		[Test]
		public void Test<#= nodeType.Name #>() {
		
			var tokenProps = typeof(<#=nodeType.Name#>).GetProperties(BindingFlags.Public | BindingFlags.Instance)
                             .Where(m => m.PropertyType ==typeof(SyntaxToken)).ToList();	
			if(!tokenProps.Any()) {
				return;
			}		
			var syntax=Syntax.<#=parserMethodName#>(SampleSyntax.Of<<#=nodeType.Name#>>());
			foreach (var prop in tokenProps) {    
				if(Attribute.IsDefined(prop, typeof(SuppressCodeSanityCheckAttribute))) {
					continue;
				}
				var tokenType= ((SyntaxToken)prop.GetValue(syntax, null)).Type;
				Assert.That(prop.Name, Is.EqualTo(tokenType.ToString()), "Der Name der Eigenschaft '{0}' sollte '{1}' lauten", prop.Name, tokenType);
			}
		}

<#        
    }
#>
	}
}
<#+

List<Type> FindAllDerivedTypesAndSelf<T>() {
    return FindAllDerivedTypesAndSelf<T>(Assembly.GetAssembly(typeof(T)));
}

List<Type> FindAllDerivedTypesAndSelf<T>(Assembly assembly) {
    var derivedType = typeof(T);
    return assembly.GetTypes()
                    .Where(t => derivedType.IsAssignableFrom(t))
                    .ToList();
}
#>