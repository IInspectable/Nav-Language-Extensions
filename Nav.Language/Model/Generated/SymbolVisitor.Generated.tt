<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDte" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#

	var visualStudio = (Host as IServiceProvider).GetService(typeof(EnvDTE.DTE)) as EnvDTE.DTE;

	var project = visualStudio.Solution.FindProjectItem(Host.TemplateFile)
                                       .ContainingProject as EnvDTE.Project;

	var classMap=FindAllDerivedTypes(project, "Pharmatechnik.Nav.Language.ISymbol");
#>
namespace Pharmatechnik.Nav.Language {

    partial interface ISymbol {
        void Accept(ISymbolVisitor visitor);
        T Accept<T>(ISymbolVisitor<T> visitor);
    }

    public interface ISymbolVisitor {
<#
    foreach(var entry in classMap) {
        var codeClass = entry.Key;
        var itf       = entry.Value;
        var baseName  = itf.Name.Substring(1, itf.Name.Length-1);
        var methodName= "Visit" + baseName;
        var paramName = baseName.Substring(0, 1).ToLower() + baseName.Substring(1, baseName.Length-1);
        WriteLine("        void " + methodName + "("+ itf.Name + " " + paramName + ");");	
    }
#>
    }

    public interface ISymbolVisitor<T> {
<#
    foreach(var entry in classMap) {
        var codeClass = entry.Key;
        var itf       = entry.Value;
        var baseName  = itf.Name.Substring(1, itf.Name.Length-1);
        var methodName= "Visit" + baseName;
        var paramName = baseName.Substring(0, 1).ToLower() + baseName.Substring(1, baseName.Length-1);
        WriteLine("        T " + methodName + "("+ itf.Name + " " + paramName + ");");	
    }
#>
    }

    partial class Symbol {
        public abstract void Accept(ISymbolVisitor visitor);
        public abstract T Accept<T>(ISymbolVisitor<T> visitor);
    }
<#
    foreach(var entry in classMap) {
        var codeClass = entry.Key;
        var itf       = entry.Value;
        var baseName  = itf.Name.Substring(1, itf.Name.Length-1);
        var methodName= "Visit" + baseName;
        var paramName = baseName.Substring(0, 1).ToLower() + baseName.Substring(1, baseName.Length-1);
#>

    partial class <#=codeClass.Name#> {

        public override void Accept(ISymbolVisitor visitor) {
            visitor.<#=methodName#>(this);
        }

        public override T Accept<T>(ISymbolVisitor<T> visitor) {
            return visitor.<#=methodName#>(this);
        }
    }
<#
    }
#>
    public abstract class SymbolVisitor: ISymbolVisitor {

        public void Visit(ISymbol symbol){
            symbol.Accept(this);
        }             

        protected virtual void DefaultVisit(ISymbol symbol) {
        }

<#
    foreach(var entry in classMap) {
        var codeClass = entry.Key;
        var itf       = entry.Value;
        var baseName  = itf.Name.Substring(1, itf.Name.Length-1);
        var methodName= "Visit" + baseName;
        var paramName = baseName.Substring(0, 1).ToLower() + baseName.Substring(1, baseName.Length-1);
#>
		public virtual void <#=methodName#>(<#=itf.Name#> <#=paramName#>) {
            DefaultVisit(<#=paramName#>);
        }

<#
    }
#>
    }

        public abstract class SymbolVisitor<T>: ISymbolVisitor<T> {

        public T Visit(ISymbol symbol){
            return symbol.Accept(this);
        }             

        protected virtual T DefaultVisit(ISymbol symbol) {
            return default(T);
        }

<#
    foreach(var entry in classMap) {
        var codeClass = entry.Key;
        var itf       = entry.Value;
        var baseName  = itf.Name.Substring(1, itf.Name.Length-1);
        var methodName= "Visit" + baseName;
        var paramName = baseName.Substring(0, 1).ToLower() + baseName.Substring(1, baseName.Length-1);
#>
		public virtual T <#=methodName#>(<#=itf.Name#> <#=paramName#>) {
            return DefaultVisit(<#=paramName#>);
        }

<#
    }
#>
    }
}
<#+
	public Dictionary<EnvDTE.CodeClass, EnvDTE.CodeInterface> FindAllDerivedTypes(EnvDTE.Project project, string interfaceName) {
		var namespaces = GetAllNamespaces(project);
		   
		List<EnvDTE.CodeInterface> symbolInterfaces=new List<EnvDTE.CodeInterface>();
		foreach( var ns in namespaces) {
			foreach(EnvDTE.CodeElement codeElem in ns.Children) {
				if (codeElem.Kind == EnvDTE.vsCMElement.vsCMElementInterface) {
					var itf=(EnvDTE.CodeInterface)codeElem;
				
					if(IsDerivedFrom(itf, interfaceName)){
						symbolInterfaces.Add(itf);
					}				
				}
			}
		}
	
		var classMap=new Dictionary<EnvDTE.CodeClass, EnvDTE.CodeInterface>();

		foreach( var ns in namespaces) {
			foreach(EnvDTE.CodeElement codeElem in ns.Children) {
				if (codeElem.Kind == EnvDTE.vsCMElement.vsCMElementClass) {
					var codeClass=(EnvDTE.CodeClass)codeElem;
				
					if(codeClass.IsAbstract) {
						continue;
					}

					var itf=ImplementedInterface(codeClass, symbolInterfaces);
					if(itf!=null && !classMap.Keys.Any(c=>c.Name==codeClass.Name)) {
						classMap.Add(codeClass, itf);					
					}								
				}
			}
		}

		return classMap;
	}

	public EnvDTE.CodeInterface ImplementedInterface(EnvDTE.CodeClass codeClass, List<EnvDTE.CodeInterface> interfaces) {
		foreach(EnvDTE.CodeInterface baseItf in codeClass.ImplementedInterfaces) {
			foreach(var itf in interfaces) {				
				if(baseItf.FullName==itf.FullName) {
					return itf;
				}		
			}	
		}	

		return null;
	}

	public bool IsDerivedFrom(EnvDTE.CodeInterface itf, string interfaceName) {
		foreach(EnvDTE.CodeInterface baseItf in itf.Bases){
			if(baseItf.IsDerivedFrom[interfaceName]){
				return true;
			} else if(IsDerivedFrom(baseItf, interfaceName)){
				return true;
			}
		}
		return false;
	}

	public List<EnvDTE.CodeNamespace> GetAllNamespaces(EnvDTE.Project project){
		var namespaces = new List<EnvDTE.CodeNamespace>();

		foreach(EnvDTE.ProjectItem item in GetProjectItemsRecursively(project.ProjectItems)) {

			if (item.FileCodeModel == null) {
				continue;
			}

			foreach(EnvDTE.CodeElement elem in item.FileCodeModel.CodeElements) {

				if (elem.Kind == EnvDTE.vsCMElement.vsCMElementNamespace) {
					namespaces.Add((EnvDTE.CodeNamespace)elem);
				}
			}
		}

		return namespaces;
	}

	public List<EnvDTE.ProjectItem> GetProjectItemsRecursively(EnvDTE.ProjectItems items) {

		var ret = new List<EnvDTE.ProjectItem>();

		if (items == null) {
			return ret;
		}

		foreach(EnvDTE.ProjectItem item in items) {
	
		  ret.Add(item);
	
		  ret.AddRange(GetProjectItemsRecursively(item.ProjectItems));
	
		}
	
		return ret;
	}
#>