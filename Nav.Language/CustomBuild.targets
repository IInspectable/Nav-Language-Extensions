<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProductName>Nav Language Library</ProductName>
    <ProductVersion>3.2.43</ProductVersion>
  </PropertyGroup>
  <Import Project="..\_build\WriteThisAssemblyFile.targets" />
  <ItemGroup>
    <AvailableItemName Include="ExportStringTemplates" />
  </ItemGroup>
  <UsingTask TaskName="GenerateStringTemplateExport" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <Files ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <OutputFiles ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="..\_build\StringTemplate4.4.0.8\lib\net35-client\Antlr4.StringTemplate.dll" />
      <Reference Include="..\_build\Antlr3.Runtime.3.5.1\lib\net40-client\Antlr3.Runtime.dll" />
      <Using Namespace="System" />
      <Code Type="Fragment" Language="cs"><![CDATA[
             const string templateText= @"

Begin(namespace, className, data) ::=<<// ReSharper disable once CheckNamespace
namespace <namespace> {
    public static partial class <className> {
        <data:writeProperty(); separator=""\r\n"">
    }
}
>>

writeProperty(kvp)  ::=<<
/// \<summary>
/// <kvp.Value>
/// \</summary>
public const string <kvp.Key> = ""<kvp.Value>"";
>>
";

         var generatedFileNames = new List<string>();

         foreach(var file in Files) {

             var fullName   = file.GetMetadata("FullPath");
             var fileName   = file.GetMetadata("FileName");
             var @namespace = file.GetMetadata("CustomToolNamespace");
             var targetPath = Path.ChangeExtension(fullName,"generated.cs");
             var className  = fileName;

             generatedFileNames.Add(targetPath);

             var templateGroup = new Antlr4.StringTemplate.TemplateGroupFile(fullName);

             var data = new Dictionary<string, string>();
             foreach(var templateName in templateGroup.GetTemplateNames()) {

                 var name    = templateName.Substring(1, 1).ToUpperInvariant() + templateName.Substring(2);
                 var st      = templateGroup.GetInstanceOf(name);

                 data[name] = st.Render();
             }

             var group = new Antlr4.StringTemplate.TemplateGroupString(templateText);
             var template = group.GetInstanceOf("Begin");
             template.Add("className"  , className);
             template.Add("namespace"  , @namespace);
             template.Add("data"       , data.ToList());

             File.WriteAllText(targetPath, template.Render(), Encoding.UTF8);
         }
         OutputFiles = generatedFileNames.Select(name => new TaskItem(name)).ToArray();
         ]]></Code>
    </Task>
  </UsingTask>
  <Target Name="GenerateStringTemplateExport" BeforeTargets="PrepareForBuild">
    <GenerateStringTemplateExport Files="@(ExportStringTemplates)" />
    <ItemGroup>
      <EmbeddedResource Include="@(ExportStringTemplates)" />
    </ItemGroup>
  </Target>
</Project>