delimiters "<", ">"

Begin(model, context) ::=<<
<writeUsingDirectives(model.UsingNamespaces)>

namespace <model.WflNamespace> {	
    public abstract partial class <model.WfsTypeName> {
        <writeInitTransitionCollapsibleList(model.InitTransitions)><\\>

        <writeExitTransitionCollapsibleList(model.ExitTransitions)><\\>

        <writeTriggerTransitionCollapsibleList(model.TriggerTransitions)><\\>
    }
}
>>

writeInitTransitionCollapsibleList(initTransitions) ::=<<
<initTransitions:writeInitTransition(); separator="\r\n\r\n">

>>

writeInitTransition(initTransition) ::=<<
<if(initTransition.GenerateAbstractMethod)>
public override IINIT_TASK <initTransition.BeginMethodName>(<writeParameterList(initTransition.Parameter)>) {
    throw new NotImplementedException();
}
<else>
protected override INavCommandBody <initTransition.BeginLogicMethodName>(<writeParameterList([initTransition.Parameter, initTransition.TaskBeginFields])>) {
    throw new NotImplementedException();
}
<endif>
>>

writeExitTransitionCollapsibleList(exitTransitions) ::=<<
<exitTransitions:writeExitTransition(); separator="\r\n\r\n">

>>

writeExitTransition(exitTransition) ::=<<
<if(exitTransition.GenerateAbstractMethod)>
protected override INavCommand <exitTransition.AfterMethodName>(<writeParameterList(exitTransition.TaskResult)>) {
    throw new NotImplementedException();
}
<else>
protected override INavCommandBody <exitTransition.AfterLogicMethodName>(<writeParameterList([exitTransition.TaskResult, exitTransition.TaskBegins])>) {
     throw new NotImplementedException();
}
<endif>
>>

writeTriggerTransitionCollapsibleList(triggerTransitions) ::=<<
<triggerTransitions:writeTriggerTransition(); separator="\r\n\r\n">

>>

writeTriggerTransition(triggerTransition) ::=<<
protected override INavCommandBody <triggerTransition.TriggerLogicMethodName>(<writeParameterList([triggerTransition.ViewParameter, triggerTransition.TaskBeginFields])>) {
    throw new NotImplementedException();
}
>>