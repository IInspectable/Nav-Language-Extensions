delimiters "<", ">"

Begin(model, context) ::=<<
<writeFileHeader(context)>
<writeUsingDirectives(model.UsingNamespaces)>

namespace <model.WflNamespace> {
    <writeTaskAnnotation(model.RelativeSyntaxFileName, model.Task.OriginalTaskName)>
    public abstract partial class <model.WfsBaseTypeName>: <model.WfsBaseBaseTypeName> {
        
        <writeFieldDeclarationCollapsibleList(model.TaskBegins)><\\>

        public <model.WfsBaseTypeName>(Pharmatechnik.Apotheke.XTplus.Framework.NavigationEngine.IWFL.IClientSideWFS clientSideWFS) {}

        public <model.WfsBaseTypeName>(<writeParameterList(model.TaskBegins)>) {
            <writeFieldInitList(model.TaskBegins)>
        }

        <writeInitTransitionCollapsibleList(model.InitTransitions)><\\>
        
        <writeBeginWrapperCollapsibleList(model.BeginWrappers)><\\>
        
        <writeTriggerDeclarationCollapsibleList()><\\>

        protected INavCommandBody TaskResult(<model.TaskResult.ParameterType> <model.TaskResult.ParameterName>) {
            return InternalTaskResult(<model.TaskResult.ParameterName>);
        }

        static string OfTypeText(object value) {
            return value == null ? "null" : $"of type {value.GetType().FullName}";
        }
    }

    <writeTaskAnnotation(model.RelativeSyntaxFileName, model.Task.TaskName)>
    public abstract partial class <model.WfsTypeName>: <model.WfsBaseTypeName> {
        <if(model.TaskParameter)>

        <model.TaskParameter:writeFieldDeclaration(); separator="\r\n">

        <else>

        <endif>
        public <model.WfsTypeName>(Pharmatechnik.Apotheke.XTplus.Framework.NavigationEngine.IWFL.IClientSideWFS clientSideWFS): base(clientSideWFS) {}

        public <model.WfsTypeName>(<writeParameterList([model.TaskBegins, model.TaskParameter])>)
            :base(<writeParameterExpressions(model.TaskBegins)>) {
            <writeFieldInitList(model.TaskParameter)>
        }
    }
}
>>

writeInitTransitionCollapsibleList(InitTransitions) ::=<<
<InitTransitions:writeInitTransition(); separator="\r\n\r\n">

>>

writeInitTransition(initTransition) ::=<<
protected abstract INavCommandBody <BeginMethodPrefix()><LogicMethodSuffix()>(<writeParameterList(initTransition.Parameter)> /* TODO reachable calls*/);

public virtual IINIT_TASK <BeginMethodPrefix()>(<writeParameterList(initTransition.Parameter)>) {
    INavCommandBody body = <BeginMethodPrefix()><LogicMethodSuffix()>(<writeParameterExpressions(initTransition.Parameter)> /*TODO reachable calls*/);
    <writeTransitionCallBlock(initTransition)>
    throw new System.InvalidOperationException($"<BeginMethodPrefix()><LogicMethodSuffix()>(<writeParameterExpressionsInline(initTransition.Parameter)> /* TODO reachable calls*/) returned unexpected result '{OfTypeText(body)}'.");
}
>>

writeBeginWrapperCollapsibleList(beginWrapperModels) ::=<<
<beginWrapperModels:writeBeginWrapper(); separator="\r\n\r\n">

>>

writeBeginWrapper(beginWrapperModel) ::=<<
<writeWrapperBeginMethodList(beginWrapperModel.Ctors)>

protected class Begin<beginWrapperModel.TaskNodeName>Wrapper: INavCommandBody {
    internal readonly BeginTaskWrapper BeginWrapper;
    <writeBeginWrapperCtorList(beginWrapperModel.Ctors)>
}

private INavCommand After<beginWrapperModel.TaskNodeName>(<writeParameterList(beginWrapperModel.Call.TaskResult)>) {
    var body = After<beginWrapperModel.TaskNodeName>Logic(<writeParameterExpressionsInline(beginWrapperModel.Call.TaskResult)>);
    <writeTransitionCallBlock(beginWrapperModel.ExitTransition)>
    // TODO Throw Exception
    throw new System.InvalidOperationException();
}

protected abstract INavCommandBody After<beginWrapperModel.TaskNodeName>Logic(<writeParameterList(beginWrapperModel.Call.TaskResult)>);
>>

writeWrapperBeginMethodList(ctorModels) ::=<<
<ctorModels:writeWrapperBeginMethod(); separator="\r\n\r\n">
>>

writeWrapperBeginMethod(ctorModel) ::=<<
<writeInitCallAnnotation(ctorModel.TaskInitParameter.ParameterType)>
protected Begin<beginWrapperModel.TaskNodeName>Wrapper Begin<ctorModel.TaskNodeName>(<writeParameterList([ctorModel.TaskInitParameter, ctorModel.TaskParameter])>) {
    return new Begin<beginWrapperModel.TaskNodeName>Wrapper(<writeParameterExpressionsInline([ctorModel.TaskInitParameter, ctorModel.TaskParameter])>);
}
>>

writeBeginWrapperCtorList(ctorModels) ::=<<
<ctorModels:writeBeginWrapperCtor(); separator="\r\n">
>>

writeBeginWrapperCtor(ctorModel) ::=<<
internal Begin<ctorModel.TaskNodeName>Wrapper(<writeParameterList([ctorModel.TaskInitParameter, ctorModel.TaskParameter])>) {
    BeginWrapper = () => <ctorModel.TaskInitParameter.ParameterName>.Begin(<writeParameterExpressionsInline(ctorModel.TaskParameter)>);
}
>>

writeTriggerDeclarationCollapsibleList() ::=<<
/* TODO writeTriggerDeclarationCollapsibleList */

>>

writeTransitionCallBlock(transition) ::=<<
<transition.Calls:writeCall(); separator="\r\n">
if(body is CANCEL) {
    return (CANCEL)body;
}
>>

writeCall(call) ::=<<
<(call.TemplateName)(call)>
>>

goToExit(call) ::=<<
if (body is TASK_RESULT) {
    return (TASK_RESULT) body;
}
>>

goToEnd(call) ::=<<
if (body is END) {
    return EndNonModal();
}
>>

startModalTask(call) ::=<<
// startModalTask <call.PascalCaseName>
>>

startNonModalTask(call) ::=<<
// startNonModalTask <call.PascalCaseName>
>>

startTask(call) ::=<<
// startTask <call.PascalCaseName>
>>

openModalGUI(call) ::=<<
// openModalGUI <call.PascalCaseName>
>>

openNonModalGUI(call) ::=<<
// openNonModalGUI <call.PascalCaseName>
>>

openGUI(call) ::=<<
// gotoGUI <call.PascalCaseName>
>>
