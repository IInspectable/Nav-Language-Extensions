delimiters "<", ">"

// Common.stg und CodeGenFacts.stg werden immer importiert

Begin(model, context) ::=<<
<writeFileHeader(context)>
<writeUsingDirectives(model.UsingNamespaces)>

namespace <model.WflNamespace> {
    <writeTaskAnnotation(model.RelativeSyntaxFileName, model.Task.TaskName)>
    public abstract partial class <model.WfsBaseTypeName>: <model.WfsBaseBaseTypeName> {
        
        <writeTaskNodeNameFieldCollapsibleList(model.AllBeginWrappers)><\\>

        <writeFieldDeclarationCollapsibleList(model.TaskBegins)><\\>

        public <model.WfsBaseTypeName>(Pharmatechnik.Apotheke.XTplus.Framework.NavigationEngine.IWFL.IClientSideWFS clientSideWFS) {}

        public <model.WfsBaseTypeName>(<writeParameterList(model.TaskBegins)>) {
            <writeFieldInitList(model.TaskBegins)>
        }

        <writeBeforeTriggerLogicCollapsibleList(model.ViewParameters)><\\>

        <writeInitTransitionCollapsibleList(model.InitTransitions)><\\>

        <writeExitTransitionCollapsibleList(model.ExitTransitions)><\\>

        <writeTriggerTransitionCollapsibleList(model.TriggerTransitions)><\\>

        <writeBeginWrapperCollapsibleList(model.BeginWrappers)><\\>

        protected INavCommandBody TaskResult(<model.TaskResult.ParameterType> <model.TaskResult.ParameterName>) {
            return InternalTaskResult(<model.TaskResult.ParameterName>);
        }
       
    }

    <writeTaskAnnotation(model.RelativeSyntaxFileName, model.Task.TaskName)>
    public partial class <model.WfsTypeName>: <model.WfsBaseTypeName>, <InterfacePrefix()><model.Task.TaskNamePascalcase><WfsClassSuffix()>, <BeginInterfacePrefix()><model.Task.TaskNamePascalcase><WfsClassSuffix()> {

        <writeFieldDeclarationCollapsibleList(model.TaskParameter)><\\>

        public <model.WfsTypeName>(Pharmatechnik.Apotheke.XTplus.Framework.NavigationEngine.IWFL.IClientSideWFS clientSideWFS): base(clientSideWFS) {}

        public <model.WfsTypeName>(<writeParameterList([model.TaskBegins, model.TaskParameter])>)
            :base(<writeParameterExpressions(model.TaskBegins)>) {
            <writeFieldInitList(model.TaskParameter)>
        }
    }
}
>>

writeBeforeTriggerLogicCollapsibleList(viewParameters) ::=<<
<viewParameters:writeBeforeTriggerLogic(); separator="\r\n">
>>

writeBeforeTriggerLogic(viewParameter) ::=<<
protected virtual <viewParameter.ParameterType> <BeforeTriggerLogicMethodName()>(<writeParameterList(viewParameter)>) => <viewParameter.ParameterName>;

>>

writeInitTransitionCollapsibleList(initTransitions) ::=<<
<initTransitions:writeInitTransition(); separator="\r\n">
>>

writeInitTransition(initTransition) ::=<<
<if(initTransition.GenerateAbstractMethod)>
<writeNavInitAnnotation(initTransition.NodeName)>
public abstract IINIT_TASK <BeginMethodPrefix()>(<writeParameterList(initTransition.Parameter)>);
<else>
<writeCallContextClassDeclaration(initTransition)><\\>
<writeNavInitAnnotation(initTransition.NodeName)>
public virtual IINIT_TASK <BeginMethodPrefix()>(<writeParameterList(initTransition.Parameter)>) {
    <writeCallContextDeclaration(initTransition)>
    var body = <BeginMethodPrefix()><LogicMethodSuffix()>(<writeParameterExpressionsInline([initTransition.Parameter, initTransition.CallContextParameter, initTransition.TaskBeginFields])>);
    <writeTransitionCallBlock(initTransition, ([ BeginMethodPrefix(), LogicMethodSuffix() ]) )>
}

<writeNavInitAnnotation(initTransition.NodeName)>
protected abstract INavCommandBody <BeginMethodPrefix()><LogicMethodSuffix()>(<writeParameterList([initTransition.Parameter, initTransition.CallContextParameter, initTransition.TaskBegins])>);
<endif>
>>

writeExitTransitionCollapsibleList(exitTransitions) ::=<<
<exitTransitions:writeExitTransition(); separator="\r\n">
>>

writeExitTransition(exitTransition) ::=<<
<if(exitTransition.GenerateAbstractMethod)>
<writeNavExitAnnotation(exitTransition.NodeName)>
protected abstract INavCommand <ExitMethodPrefix()><exitTransition.NodeNamePascalcase><LogicMethodSuffix()>(<writeParameterList(exitTransition.TaskResult)>);
<else>
<writeCallContextClassDeclaration(exitTransition)><\\>
<writeNavExitAnnotation(exitTransition.NodeName)>
private INavCommand <ExitMethodPrefix()><exitTransition.NodeNamePascalcase>(<writeParameterList(exitTransition.TaskResult)>) {
    <writeCallContextDeclaration(exitTransition)>
    var body = <ExitMethodPrefix()><exitTransition.NodeNamePascalcase><LogicMethodSuffix()>(<writeParameterExpressionsInline([exitTransition.TaskResult, exitTransition.CallContextParameter, exitTransition.TaskBeginFields])>);
    <writeTransitionCallBlock(exitTransition, ([ ExitMethodPrefix(), (exitTransition.NodeNamePascalcase), LogicMethodSuffix() ]) )>
}

<writeNavExitAnnotation(exitTransition.NodeName)>
protected abstract INavCommandBody <ExitMethodPrefix()><exitTransition.NodeNamePascalcase><LogicMethodSuffix()>(<writeParameterList([exitTransition.TaskResult, exitTransition.CallContextParameter, exitTransition.TaskBegins])>);
<endif>
>>

writeTriggerTransitionCollapsibleList(triggerTransitions) ::=<<
<triggerTransitions:writeTriggerTransition(); separator="\r\n\r\n">

>>

writeTriggerTransition(triggerTransition) ::=<<
<writeCallContextClassDeclaration(triggerTransition)><\\>
<writeTriggerAnnotation(triggerTransition.TriggerName)>
public virtual INavCommand <triggerTransition.TriggerName>(<writeParameterList(triggerTransition.ViewParameter)>) {
    <triggerTransition.ViewParameter.ParameterName> = <BeforeTriggerLogicMethodName()>(<writeParameterExpression(triggerTransition.ViewParameter)>);
    <writeCallContextDeclaration(triggerTransition)>
    var body = <triggerTransition.TriggerName><LogicMethodSuffix()>(<writeParameterExpressionsInline([triggerTransition.ViewParameter, triggerTransition.CallContextParameter, triggerTransition.TaskBeginFields])>);    
    <writeTransitionCallBlock(triggerTransition, ([ (triggerTransition.TriggerName), LogicMethodSuffix() ]) )>
}

<writeTriggerAnnotation(triggerTransition.TriggerName)>
protected abstract INavCommandBody <triggerTransition.TriggerName><LogicMethodSuffix()>(<writeParameterList([triggerTransition.ViewParameter, triggerTransition.CallContextParameter, triggerTransition.TaskBegins])>);
>>

writeTaskNodeNameFieldCollapsibleList(beginWrapperModels) ::=<<
<beginWrapperModels:writeTaskNodeNameField(); separator="\r\n">

>>

writeTaskNodeNameField(beginWrapperModel) ::=<<
const string <beginWrapperModel.TaskNodeNamePascalcase>NodeName = "<beginWrapperModel.TaskNodeName>";
>>

writeBeginWrapperCollapsibleList(beginWrapperModels) ::=<<
<beginWrapperModels:writeBeginWrapper(); separator="\r\n\r\n">

>>

writeBeginWrapper(beginWrapperModel) ::=<<
<writeWrapperBeginMethodList(beginWrapperModel.TaskBegins)>
>>

writeWrapperBeginMethodList(taskBegins) ::=<<
<taskBegins:writeWrapperBeginMethod(); separator="\r\n\r\n">
>>

writeWrapperBeginMethod(taskBegin) ::=<<
<writeInitCallAnnotation(taskBegin.TaskBeginParameter.ParameterType)>
protected INavCommandBody <BeginMethodPrefix()><taskBegin.TaskNodeNamePascalcase>(<writeParameterList([taskBegin.TaskBeginParameter, taskBegin.TaskParameter])>) {
    <if(taskBegin.NotImplemented)>
    return new TaskCall(<taskBegin.TaskNodeNamePascalcase>NodeName, null);
    <else>
    return new TaskCall(<taskBegin.TaskNodeNamePascalcase>NodeName, () => <taskBegin.TaskBeginParameter.ParameterName>.<BeginMethodPrefix()>(<writeParameterExpressionsInline(taskBegin.TaskParameter)>));
    <endif>
}
>>

writeCallContextClassDeclaration(transition) ::=<<
<if(transition.EmitCallContext)>
protected sealed record <transition.CallContext.ClassName>(<transition.CallContext.ContainingTask.WfsBaseTypeName> wfs) {

    internal Continuation Show(<transition.CallContext.ViewName><ToClassNameSuffix()> to) => new (wfs, to);

    internal sealed record Continuation(<transition.CallContext.ContainingTask.WfsBaseTypeName> wfs, <transition.CallContext.ViewName><ToClassNameSuffix()> to) {

        <writeContinuationsCollapsibleList(transition.CallContext.Continuations)>
    }
}

<endif>
>>

writeContinuationsCollapsibleList(continuationCodeModels) ::=<<
<continuationCodeModels:writeContinuationBeginWrapper(); separator="\r\n\r\n">

>>

writeContinuationBeginWrapper(continuationCodeModel) ::=<<
<writeContinuationBeginMethodList(continuationCodeModel.Call, continuationCodeModel.BeginWrapper.TaskBegins)>
>>

writeContinuationBeginMethodList(callModel, taskBegins) ::=<<
<taskBegins:{it | <writeContinuationBeginMethod(it, callModel)>}; separator="\r\n\r\n">
>>

writeContinuationBeginMethod(taskBegin, callModel) ::=<<
<writeInitCallAnnotation(taskBegin.TaskBeginParameter.ParameterType)>
public INavCommandBody <BeginMethodPrefix()><taskBegin.TaskNodeNamePascalcase>(<writeParameterList([taskBegin.TaskParameter])>) {
    return new ConcatCommand {
        TO           = to,
        Continuation = <writeContinuationTaskCall(taskBegin, callModel)>,
    };
}
>>

writeContinuationTaskCall(taskBegin, taskCall) ::=<%
    <if(taskBegin.NotImplemented)>
    new TaskCall(<taskBegin.TaskNodeNamePascalcase>NodeName, null);
    <else>
    new TaskCall(<taskBegin.TaskNodeNamePascalcase>NodeName, () => wfs.<taskBegin.TaskBeginField.ParameterName>.<BeginMethodPrefix()>(<writeParameterExpressionsInline(taskBegin.TaskParameter)>))
    <endif>
%>

writeCallContextDeclaration(transition) ::=<<
<if(transition.EmitCallContext)>
var callContext = new <transition.CallContext.ClassName>(this);<endif>
>>

writeTransitionCallBlock(transition, logicMethodName) ::=<<
switch(body) {
    <transition.ReachableCalls:writeCall(); separator="\r\n">
    default:
        throw new InvalidOperationException(NavCommandBody.ComposeUnexpectedTransitionMessage(nameof(<logicMethodName>), body));
}<writeContinuationCallBlock(transition, logicMethodName)>
>>

writeContinuationCallBlock(transition, logicMethodName) ::=<<
<if(transition.ReachableContinuationCalls)>

ITASK_BOUNDARY ContinueWith(INavCommandBody continuationBody) {
    switch(continuationBody) {
        <transition.ReachableContinuationCalls:writeCall(); separator="\r\n">
        default:
            throw new InvalidOperationException(NavCommandBody.ComposeUnexpectedTransitionMessage(nameof(<logicMethodName>), continuationBody));
    }
}<endif>
>>

writeCall(call) ::=<<
<(call.TemplateName)(call)>
>>

cancel(call) ::=<<
case CANCEL cancel:
    return cancel;
>>

goToExit(call) ::=<<
case TASK_RESULT taskResult:
    return taskResult;
>>

goToEnd(call) ::=<<
case END _: 
    return EndNonModal();
>>

openModalTask(taskCall) ::=<<
case TaskCall taskCall when taskCall.NodeName == <taskCall.PascalcaseName>NodeName:
    <if(taskCall.NotImplemented)>
    throw new NotImplementedException("Task <taskCall.Name> is specified as [notimplemented]");
    <else>
    return OpenModalTask\<<taskCall.TaskResult.ParameterType>\>(taskCall.BeginWrapper, <ExitMethodPrefix()><taskCall.PascalcaseName>);<\\>
    <endif>
>>

startNonModalTask(taskCall) ::=<<
case TaskCall taskCall when taskCall.NodeName == <taskCall.PascalcaseName>NodeName:
    <if(taskCall.NotImplemented)>
    throw new NotImplementedException("Task <taskCall.Name> is specified as [notimplemented]");
    <else>
    return StartNonModalTask(taskCall.BeginWrapper, <ExitMethodPrefix()><taskCall.PascalcaseName>);<\\>
    <endif>
>>

gotoTask(taskCall) ::=<<
case TaskCall taskCall when taskCall.NodeName == <taskCall.PascalcaseName>NodeName:
    <if(taskCall.NotImplemented)>
    throw new NotImplementedException("Task <taskCall.Name> is specified as [notimplemented]");
    <else>
    return GotoTask\<<taskCall.TaskResult.ParameterType>\>(taskCall.BeginWrapper, <ExitMethodPrefix()><taskCall.PascalcaseName>);<\\>
    <endif>
>>

openModalGUI(call) ::=<<
case <call.PascalcaseName><ToClassNameSuffix()> <call.CamelcaseName><ToClassNameSuffix()>:
    return OpenModalGUI(<call.CamelcaseName><ToClassNameSuffix()>);
>>

startNonModalGUI(call) ::=<<
case <call.PascalcaseName><ToClassNameSuffix()> <call.CamelcaseName><ToClassNameSuffix()>:
    return StartNonModalGUI(<call.CamelcaseName><ToClassNameSuffix()>);
>>

gotoGUI(call) ::=<<
case <call.PascalcaseName><ToClassNameSuffix()> <call.CamelcaseName><ToClassNameSuffix()>:
    return GotoGUI(<call.CamelcaseName><ToClassNameSuffix()>);
>>

openModalGUIConcat(call) ::=<<
case ConcatCommand concatCommand when concatCommand.TO is <call.PascalcaseName><ToClassNameSuffix()> to:
    return OpenModalGUI(to).Concat(ContinueWith(concatCommand.Continuation));
>>

startNonModalGUIConcat(call) ::=<<
case ConcatCommand concatCommand when concatCommand.TO is <call.PascalcaseName><ToClassNameSuffix()> to:
    return StartNonModalGUI(to).Concat(ContinueWith(concatCommand.Continuation));
>>

gotoGUIConcat(call) ::=<<
case ConcatCommand concatCommand when concatCommand.TO is <call.PascalcaseName><ToClassNameSuffix()> to:
    return GotoGUI(to).Concat(ContinueWith(concatCommand.Continuation));
>>