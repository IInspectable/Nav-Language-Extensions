delimiters "<", ">"

Begin(model, context) ::=<<
<writeFileHeader(context)>
<writeUsingDirectives(model.UsingNamespaces)>

namespace <model.WflNamespace> {
    <writeTaskAnnotation(model.RelativeSyntaxFileName, model.Task.TaskName)>
    public abstract partial class <model.WfsBaseTypeName>: <model.WfsBaseBaseTypeName> {
        
        <writeFieldDeclarationList(model.TaskBegins)><\\>

        public <model.WfsBaseTypeName>(Pharmatechnik.Apotheke.XTplus.Framework.NavigationEngine.IWFL.IClientSideWFS clientSideWFS) {}

        public <model.WfsBaseTypeName>(<writeParameterList(model.TaskBegins)>) {
            <writeFieldInits(model.TaskBegins)>
        }

        <writeBeginMethodDeclarationList(model.TaskInits)><\\>
        
        <writeCallWrapperDeclarationList()><\\>
        
        <writeTriggerDeclarationList()><\\>

        protected INavCommandBody TaskResult(<model.TaskResult.ParameterType> <model.TaskResult.ParameterName>) {
            return InternalTaskResult(<model.TaskResult.ParameterName>);
        }

        static string OfTypeText(object value) {
            return value == null ? "null" : $"of type {value.GetType().FullName}";
        }
    }

    <writeTaskAnnotation(model.RelativeSyntaxFileName, model.Task.TaskName)>
    public abstract partial class <model.WfsTypeName>: <model.WfsBaseTypeName> {
        <if(model.TaskParameter)>

        <model.TaskParameter:writeFieldDeclaration(); separator="\r\n">

        <else>

        <endif>
        public <model.WfsTypeName>(Pharmatechnik.Apotheke.XTplus.Framework.NavigationEngine.IWFL.IClientSideWFS clientSideWFS): base(clientSideWFS) {}

        public <model.WfsTypeName>(<writeParameterList([model.TaskBegins, model.TaskParameter])>)
            :base(<writeParameterExpressions(model.TaskBegins)>) {
            <writeFieldInits(model.TaskParameter)>
        }
    }
}
>>

writeParameterList(parameters) ::=<<
<parameters:writeParameter(); anchor, separator=",\r\n">
>>

writeParameter(parameter) ::=<<
<parameter.ParameterType> <parameter.ParameterName>
>>

writeFieldDeclarationList(parameters) ::=<<
<model.TaskBegins:writeFieldDeclaration(); separator="\r\n">

>>

writeFieldDeclaration(parameter) ::=<<
readonly <parameter.ParameterType> _<parameter.ParameterName>;
>>

writeFieldInits(parameters) ::=<<
<parameters:writeFieldInit(); separator="\r\n">
>>

writeFieldInit(parameter) ::=<<
_<parameter.ParameterName> = <parameter.ParameterName>;
>>

writeParameterExpressions(parameters) ::=<<
<parameters:writeParameterExpression(); anchor, separator=",\r\n">
>>

writeParameterExpressionsInline(parameters) ::=<<
<parameters:writeParameterExpression(); anchor, separator=", ">
>>

writeParameterExpression(parameter) ::=<<
<parameter.ParameterName>
>>

writeBeginMethodDeclarationList(taskInits) ::=<<
<taskInits:writeBeginMethodDeclaration(); separator="\r\n">

>>

writeBeginMethodDeclaration(taskInit) ::=<<
protected abstract INavCommandBody BeginLogic(<writeParameterList(taskInit.Parameter)> /* TODO reachable calls*/);

public virtual IINIT_TASK <taskInit.BeginMethodName>(<writeParameterList(taskInit.Parameter)>) {
    INavCommandBody body = BeginLogic(<writeParameterExpressions(taskInit.Parameter)> /*TODO reachable calls*/);
    // TODO Generate Code
    if(body is CANCEL) {
        return (CANCEL)body;
    }
    throw new System.InvalidOperationException($"BeginLogic(<writeParameterExpressionsInline(taskInit.Parameter)> /* TODO reachable calls*/) returned unexpected result '{OfTypeText(body)}'.");
}
>>

writeCallWrapperDeclarationList() ::=<<
/* TODO writeCallWrapperDeclarationList */ 

>>

writeTriggerDeclarationList() ::=<<
/* TODO writeTriggerDeclarationList */

>>
