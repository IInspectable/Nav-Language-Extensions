<#@ template debug ="false" hostspecific="false" language="C#" #>
<#@ assembly name  ="System.Core" #> 
<#@ assembly name  ="$(targetdir)Pharmatechnik.Nav.Language.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Pharmatechnik.Nav.Language" #>
<#@ output extension=".cs" #>
//==================================================
// HINWEIS: Diese Datei wurde am <#= DateTime.Now.ToString(new CultureInfo("de-DE"))#>
//			automatisch generiert!
//==================================================
namespace Pharmatechnik.Nav.Language {

	partial class SyntaxNode {
		public abstract void Walk(SyntaxNodeWalker walker);
	}

	#region SyntaxNode Implementation
	
<#
	var nodeTypes = FindAllDerivedTypesAndSelf<SyntaxNode>()
							.Where(n=>!n.IsAbstract)
							.OrderBy(nodeType=> nodeType.Name);

	foreach (var nodeType in nodeTypes) {

	var walkerMethodName="Walk" + nodeType.Name.Substring(0, nodeType.Name.Length-6);
#>
	partial class <#= nodeType.Name #> {
		public override void Walk(SyntaxNodeWalker walker) {
			if(!walker.<#= walkerMethodName #>(this)) {
				return;
			}
			foreach(var child in ChildNodes()) {
				child.Walk(walker);
			}
			walker.Post<#= walkerMethodName #>(this);
		}
	}

<#        
	}
#>
	#endregion

	public abstract class SyntaxNodeWalker {

		public void Walk(SyntaxNode node) {
			node.Walk(this);
		}

		public virtual bool DefaultWalk(SyntaxNode node) {
			return true;
		}

<#
	nodeTypes = FindAllDerivedTypesAndSelf<SyntaxNode>().Where(n=>!n.IsAbstract).OrderBy(nodeType => nodeType.Name.Length);

	foreach (var nodeType in nodeTypes) {
		var walkerMethodName = "Walk" + nodeType.Name.Substring(0, nodeType.Name.Length-6);
		var arumentName      = Char.ToLower(nodeType.Name[0]) + nodeType.Name.Substring(1);
#>
		// <#= nodeType.Name #>
		public virtual bool <#= walkerMethodName #>(<#= nodeType.Name #> <#= arumentName#>) { return DefaultWalk(<#= arumentName#>); }
		public virtual void Post<#= walkerMethodName #>(<#= nodeType.Name #> <#= arumentName#>) { }

<#        
    }
#>
	}
}
<#+

List<Type> FindAllDerivedTypesAndSelf<T>() {
    return FindAllDerivedTypesAndSelf<T>(Assembly.GetAssembly(typeof(T)));
}

List<Type> FindAllDerivedTypesAndSelf<T>(Assembly assembly) {
    var derivedType = typeof(T);
    return assembly.GetTypes()
                    .Where(t => derivedType.IsAssignableFrom(t))
                    .ToList();

}
#>