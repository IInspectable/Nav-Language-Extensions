<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #> 
<#@ assembly name="$(targetdir)Pharmatechnik.Nav.Language.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Pharmatechnik.Nav.Language" #>
<#@ output extension=".cs" #>
//==================================================
// HINWEIS: Diese Datei wurde am <#= DateTime.Now.ToString(new CultureInfo("de-DE"))#>
//			automatisch generiert!
//==================================================
namespace Pharmatechnik.Nav.Language {

    using System.Threading;

	public static class Syntax {
		
<#

	var nodeTypes = FindAllDerivedTypesAndSelf<SyntaxNode>().Where(n=>!n.IsAbstract).OrderBy(nodeType=> nodeType.Name.Length);

	foreach (var nodeType in nodeTypes) {
		var methodName=nodeType.Name.Substring(0, nodeType.Name.Length-6);
		var parserMethodName=Char.ToLower(nodeType.Name[0]) + nodeType.Name.Substring(1, nodeType.Name.Length-7);
#>
		public static <#= nodeType.Name #> Parse<#= methodName #>(string text, string filePath = null, CancellationToken cancellationToken = default(CancellationToken)) {
			return (<#=nodeType.Name#>)SyntaxTree.ParseTextCore(text, parser => parser.<#=parserMethodName#>(), filePath, null, cancellationToken).GetRoot();		
		}

<#        
    }

#>
	}
}
<#+

List<Type> FindAllDerivedTypesAndSelf<T>() {
    return FindAllDerivedTypesAndSelf<T>(Assembly.GetAssembly(typeof(T)));
}

List<Type> FindAllDerivedTypesAndSelf<T>(Assembly assembly) {
    var derivedType = typeof(T);
    return assembly.GetTypes()
                    .Where(t => derivedType.IsAssignableFrom(t))
                    .ToList();

}
#>