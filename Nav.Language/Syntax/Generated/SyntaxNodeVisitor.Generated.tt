<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #> 
<#@ assembly name="$(targetdir)Pharmatechnik.Nav.Language.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Pharmatechnik.Nav.Language" #>
<#@ output extension=".cs" #>
//==================================================
// HINWEIS: Diese Datei wurde am <#= DateTime.Now.ToString(new CultureInfo("de-DE"))#>
//			automatisch generiert!
//==================================================
namespace Pharmatechnik.Nav.Language {

	partial class SyntaxNode {
		internal abstract void Accept(ISyntaxNodeVisitor visitor);
		internal abstract T Accept<T>(ISyntaxNodeVisitor<T> visitor);
	}

<#

	var nodeTypes = FindAllDerivedTypesAndSelf<SyntaxNode>()
							.Where(n=>!n.IsAbstract)
							.OrderBy(nodeType=> nodeType.Name);

	foreach (var nodeType in nodeTypes) {

		var visitMethodName="Visit" + nodeType.Name.Substring(0, nodeType.Name.Length-6);
#>
	partial class <#= nodeType.Name #> {
		internal override void Accept(ISyntaxNodeVisitor visitor) {
			visitor.<#= visitMethodName #>(this);
		}
		internal override T Accept<T>(ISyntaxNodeVisitor<T> visitor) {
			return visitor.<#= visitMethodName #>(this);
		}
	}

<#        
    }
#>
	public interface ISyntaxNodeVisitor {
<#
	foreach (var nodeType in nodeTypes) {
		var visitMethodName= "Visit" + nodeType.Name.Substring(0, nodeType.Name.Length-6);
		var arumentName=Char.ToLower(nodeType.Name[0]) + nodeType.Name.Substring(1);
#>
		void <#= visitMethodName #>(<#= nodeType.Name #> <#= arumentName#>); 
<#        
    }

#>
	}

	public abstract class SyntaxNodeVisitor: ISyntaxNodeVisitor {

		public void Visit(SyntaxNode node){
			node.Accept(this);
		}

		protected virtual void DefaultVisit(SyntaxNode node) {			
		}

<#

	nodeTypes = FindAllDerivedTypesAndSelf<SyntaxNode>().Where(n=>!n.IsAbstract).OrderBy(nodeType => nodeType.Name.Length);

	foreach (var nodeType in nodeTypes) {
		var visitMethodName="Visit" + nodeType.Name.Substring(0, nodeType.Name.Length-6);
		var arumentName=Char.ToLower(nodeType.Name[0]) + nodeType.Name.Substring(1);
#>
		public virtual void <#= visitMethodName #>(<#= nodeType.Name #> <#= arumentName#>) {
			DefaultVisit(<#= arumentName#>);
		}

<#        
    }
#>
	}

	public interface ISyntaxNodeVisitor<T> {
<#
	foreach (var nodeType in nodeTypes) {
		var visitMethodName= "Visit" + nodeType.Name.Substring(0, nodeType.Name.Length-6);
		var arumentName=Char.ToLower(nodeType.Name[0]) + nodeType.Name.Substring(1);
#>
		T <#= visitMethodName #>(<#= nodeType.Name #> <#= arumentName#>); 
<#        
    }

#>
	}

	public abstract class SyntaxNodeVisitor<T>: ISyntaxNodeVisitor<T> {

		public T Visit(SyntaxNode node){
			return node.Accept(this);
		}

		protected virtual T DefaultVisit(SyntaxNode node) {
			return default(T);
		}

<#

	nodeTypes = FindAllDerivedTypesAndSelf<SyntaxNode>().Where(n=>!n.IsAbstract).OrderBy(nodeType => nodeType.Name.Length);

	foreach (var nodeType in nodeTypes) {
		var visitMethodName="Visit" + nodeType.Name.Substring(0, nodeType.Name.Length-6);
		var arumentName=Char.ToLower(nodeType.Name[0]) + nodeType.Name.Substring(1);
#>
		public virtual T <#= visitMethodName #>(<#= nodeType.Name #> <#= arumentName#>) {
			return DefaultVisit(<#= arumentName#>);
		}

<#        
    }
#>
	}
}
<#+

List<Type> FindAllDerivedTypesAndSelf<T>() {
    return FindAllDerivedTypesAndSelf<T>(Assembly.GetAssembly(typeof(T)));
}

List<Type> FindAllDerivedTypesAndSelf<T>(Assembly assembly) {
    var derivedType = typeof(T);
    return assembly.GetTypes()
                    .Where(t => derivedType.IsAssignableFrom(t))
                    .ToList();

}
#>