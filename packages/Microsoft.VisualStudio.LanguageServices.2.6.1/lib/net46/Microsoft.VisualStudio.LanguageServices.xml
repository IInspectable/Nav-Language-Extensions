<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.LanguageServices</name>
    </assembly>
    <members>
        <member name="F:Microsoft.Internal.Performance.CodeMarkers.State.Enabled">
            <summary>
            The atom is present. CodeMarkers are enabled.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.Performance.CodeMarkers.State.Disabled">
            <summary>
            The atom is not present, but InitPerformanceDll has not yet been called.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.Performance.CodeMarkers.State.DisabledDueToDllImportException">
            <summary>
            Disabled because the CodeMarkers transport DLL could not be found or
            an import failed to resolve.
            </summary>
        </member>
        <member name="P:Microsoft.Internal.Performance.CodeMarkers.IsEnabled">
            <summary>
            Are CodeMarkers enabled? Note that even if IsEnabled returns false, CodeMarkers
            may still be enabled later in another component.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.CodeMarker(System.Int32)">
            <summary>
            Sends a code marker event
            </summary>
            <param name="nTimerID">The code marker event ID</param>
            <returns>true if the code marker was successfully sent, false if code markers are
            not enabled or an error occurred.</returns>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.CodeMarkerEx(System.Int32,System.Byte[])">
            <summary>
            Sends a code marker event with additional user data
            </summary>
            <param name="nTimerID">The code marker event ID</param>
            <param name="aBuff">User data buffer. May not be null.</param>
            <returns>true if the code marker was successfully sent, false if code markers are
            not enabled or an error occurred.</returns>
            <exception cref="T:System.ArgumentNullException">aBuff was null</exception>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.SetStateDLLException">
            <summary>
            Used by ManagedPerfTrack.cs to report errors accessing the DLL.
            </summary>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.CodeMarkerEx(System.Int32,System.Guid)">
            <summary>
            Sends a code marker event with additional Guid user data
            </summary>
            <param name="nTimerID">The code marker event ID</param>
            <param name="guidData">The additional Guid to include with the event</param>
            <returns>true if the code marker was successfully sent, false if code markers are
            not enabled or an error occurred.</returns>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.CodeMarkerEx(System.Int32,System.String)">
            <summary>
            Sends a code marker event with additional String user data
            </summary>
            <param name="nTimerID">The code marker event ID</param>
            <param name="stringData">The additional String to include with the event</param>
            <returns>true if the code marker was successfully sent, false if code markers are
            not enabled or an error occurred.</returns>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.StringToBytesZeroTerminated(System.String)">
            <summary>
            Converts a string into a byte buffer including a zero terminator (needed for proper ETW message formatting)
            </summary>
            <param name="stringData">String to be converted to bytes</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.CodeMarkerEx(System.Int32,System.UInt32)">
            <summary>
            Sends a code marker event with additional DWORD user data
            </summary>
            <param name="nTimerID">The code marker event ID</param>
            <param name="uintData">The additional DWORD to include with the event</param>
            <returns>true if the code marker was successfully sent, false if code markers are
            not enabled or an error occurred.</returns>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.CodeMarkerEx(System.Int32,System.UInt64)">
            <summary>
            Sends a code marker event with additional QWORD user data
            </summary>
            <param name="nTimerID">The code marker event ID</param>
            <param name="ulongData">The additional QWORD to include with the event</param>
            <returns>true if the code marker was successfully sent, false if code markers are
            not enabled or an error occurred.</returns>
        </member>
        <member name="M:Microsoft.Internal.Performance.CodeMarkers.UsePrivateCodeMarkers(System.String,Microsoft.Win32.RegistryView)">
            <summary>
            Checks the registry to see if code markers are enabled
            </summary>
            <param name="regRoot">The registry root</param>
            <param name="registryView"></param>
            <returns>Whether CodeMarkers are enabled in the registry</returns>
        </member>
        <member name="T:Microsoft.Internal.Performance.CodeMarkerStartEnd">
            <summary>
            Use CodeMarkerStartEnd in a using clause when you need to bracket an
            operation with a start/end CodeMarker event pair.
            </summary>
        </member>
        <member name="T:Microsoft.Internal.Performance.CodeMarkerExStartEnd">
            <summary>
            Use CodeMarkerExStartEnd in a using clause when you need to bracket an
            operation with a start/end CodeMarker event pair.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.Shell.Interop.__VsRemoteControlBehaviorOnStale.ReturnsStale">
            <summary>
            Returns the last locally cached file for this URL or null if no locally cached file found.
            </summary>
        </member>
        <member name="F:Microsoft.Internal.VisualStudio.Shell.Interop.__VsRemoteControlBehaviorOnStale.ReturnsNull">
            <summary>
            If the locally cached file exists and it was checked against the server less than pollingIntervalMinutes (specified in CreateClient) ago, returns that. Otherwise null.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.HACK_ThemeColorFixer">
            <summary>
            This class works around the fact that shell theme changes are not fully propagated into an
            editor classification format map unless a classification type is registered as a font and
            color item in that format map's font and color category. So, for example, the "Keyword"
            classification type in the "tooltip" classification format map is never is never updated
            from its default blue. As a work around, we listen to <see cref="E:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMap.ClassificationFormatMappingChanged"/>
            and update the classification format maps that we care about.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.IAnalyzerNodeSetup">
            <summary>
            An interface to be implemented in the SolutionExplorerShim project to register the stuff needed there.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.ID.CSharpCommands">
            <summary>
            Commands using the old C# command set GUID.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.ID.RoslynCommands">
            <summary>
            Commands using the old Roslyn command set GUID.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.AbstractEditorFactory">
            <summary>
            The base class of both the Roslyn editor factories.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.Implementation.AbstractOleCommandTarget.CurrentlyExecutingCommand">
            <summary>
            This is set only during Exec. Currently, this is required to disambiguate the editor calls to
            <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewFilter.GetPairExtents(System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])"/> between GotoBrace and GotoBraceExt commands.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.Implementation.AbstractOleCommandTarget.WpfTextView">
            <summary>
            The IWpfTextView that this command filter is attached to.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.Implementation.AbstractOleCommandTarget.CurrentHandlers">
            <summary>
            The command handler service to use for dispatching commands. This is set by
            the derived classes to this class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.Implementation.AbstractOleCommandTarget.NextCommandTarget">
            <summary>
            The next command target in the chain. This is set by the derived implementation of this
            class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.AbstractOleCommandTarget.ExecuteInteractive(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr,Microsoft.VisualStudio.Text.ITextBuffer,Microsoft.VisualStudio.Utilities.IContentType)">
            <remarks>TODO: Revert the change to use standard VS11 command pending https://github.com/dotnet/roslyn/issues/8927 .</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.AbstractOleCommandTarget.QueryInteractiveStatus(System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)">
            <remarks>TODO: Revert the change to use standard VS11 command pending https://github.com/dotnet/roslyn/issues/8927 .</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.ChangeSignature.ChangeSignatureDialog">
            <summary>
            Interaction logic for ExtractInterfaceDialog.xaml
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.LanguageServices.Implementation.ChangeSignature.ChangeSignatureDialog.TEST_DialogLoaded">
            <summary>
            For test purposes only. The integration tests need to know when the dialog is up and
            ready for automation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.ChangeSignature.ChangeSignatureDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.DebuggerIntelliSense.AbstractDebuggerIntelliSenseContext.SetupImmediateWindowProjectionBuffer">
            <summary>
            If there's a ? mark, we want to skip the ? mark itself, and include the text that follows it
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.Implementation.DebuggerIntelliSense.DebuggerTextView._innerTextView">
            <summary>
            The actual debugger view of the watch or immediate window that we're wrapping
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.Implementation.DebuggerIntelliSense.DebuggerTextView.BufferGraph">
            <summary>
            We basically replace the innerTextView's BufferGraph with our own custom projection graph
            that projects the immediate window contents into a context buffer:
            
                        (1)
                    (2)     (5)
                    (3)     (6)
                    (4)
            (1) Top level projection buffer - the subject buffer used by intellisense
            (2/3) Currently a double projection buffer combo that elides away the ? in the immediate window, and may add some 
                  boilerplate code to force an expression context.
            (4) innerTextView.TextBuffer, what the user actually sees in the watch/immediate windows
            (5) A read-only projection of (6)
            (6) The context buffer which is typically a source file
            
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.DebuggerIntelliSense.DebuggerTextView.HACK_CompletionSession">
            <remarks>
            Dev11's debugger intellisense uses the old completion shims and routes commands through
            them. Since we use the new editor completion and sighelp brokers for our sessions, the shims
            are unaware of any sessions and don't pass us any commands other than typechar. To determine
            whether to pass commands or non, the shims simply verify that they have a pointer to an
            ICompletionSession. We will use reflection to place an ICompletionSession in the field.
            
            Furthermore, Dev11's debugger intellisense does not pass commands on to SignatureHelp at
            all. It's therefore impossible to use the arrow keys to navigate overloads, etc. If we give
            the CompletionSessionShim an ICompletionSession, though, we still get the commands and our
            command handlers can deal with them appropriately. To get commands when only our
            SignatureHelp is up, we still must provide an ICompletionSession, which this class provides. 
            Note: Any calls to methods in this class will throw, since the completion shims should not
            be doing anything.
            
            We also include a counter so that we can null out the field when all of our sessions have
            actually ended.
            
            See CEditCtlStatementCompletion::HandleKeyDown for more information
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.Debugging.AbstractBreakpointResolver.IsApplicable(Microsoft.CodeAnalysis.ISymbol,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Is this method or property a valid place to set a breakpoint and does it match the expected parameter count?
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.Implementation.DesignerAttribute.DesignerAttributeIncrementalAnalyzer._dotNotAccessDirectlyDesigner">
            <summary>
            cache designer from UI thread
            
            access this field through <see cref="M:Microsoft.VisualStudio.LanguageServices.Implementation.DesignerAttribute.DesignerAttributeIncrementalAnalyzer.GetDesignerFromForegroundThread"/>
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.Implementation.DesignerAttribute.DesignerAttributeIncrementalAnalyzer.DesignerAttributeState._lastReported">
            <summary>
            remember last time what we reported
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.Diagnostics.IVisualStudioDiagnosticAnalyzerService.GetAllDiagnosticDescriptors(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Gets a list of the diagnostics that are provided by this service.
            If the given <paramref name="hierarchyOpt"/> is non-null and corresponds to an existing project in the workspace, then gets the diagnostics for the project.
            Otherwise, returns the global set of diagnostics enabled for the workspace.
            </summary>
            <returns>A mapping from analyzer name to the diagnostics produced by that analyzer</returns>
            <remarks>
            This is used by the Ruleset Editor from ManagedSourceCodeAnalysis.dll in VisualStudio.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.Diagnostics.VisualStudioWorkspaceDiagnosticAnalyzerProviderService">
            <summary>
            This service provides diagnostic analyzers from the analyzer assets specified in the manifest files of installed VSIX extensions.
            These analyzers are used across this workspace session.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.Implementation.Diagnostics.VisualStudioWorkspaceDiagnosticAnalyzerProviderService.s_analyzerAssemblyLoader">
            <summary>
            Loader for VSIX-based analyzers.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.Implementation.EditAndContinue.Interop.FILEUPDATE.LineUpdates">
            <summary>
            This is really an pointer to an array of "cLineUpdate" LINEUPDATE struct.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.Implementation.EditAndContinue.VsENCRebuildableProjectImpl._mvid">
            <summary>
            Initialized when the project switches to debug state.
            <see cref="F:System.Guid.Empty"/> if the project has no output file or we can't read the MVID.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.Implementation.EditAndContinue.VsENCRebuildableProjectImpl.NonReentrantContext">
            <summary>
            Since we can't await asynchronous operations we need to wait for them to complete.
            The default SynchronizationContext.Wait pumps messages giving the debugger a chance to 
            reenter our EnC implementation. To avoid that we use a specialized SynchronizationContext
            that doesn't pump messages. We need to make sure though that the async methods we wait for
            don't dispatch to foreground thread, otherwise we would end up in a deadlock.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.EditAndContinue.VsENCRebuildableProjectImpl.StartDebuggingPE">
            <summary>
            Invoked when the debugger transitions from Design mode to Run mode or Break mode.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.EditAndContinue.VsENCRebuildableProjectImpl.ReadMvid(System.String)">
            <summary>
            Given a path to an assembly, returns its MVID (Module Version ID).
            May throw.
            </summary>
            <exception cref="T:System.IO.IOException">If the file at <paramref name="filePath"/> does not exist or cannot be accessed.</exception>
            <exception cref="T:System.BadImageFormatException">If the file is not an assembly or is somehow corrupted.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.EditAndContinue.VsENCRebuildableProjectImpl.GetPEidentity(System.Guid[],System.String[])">
            <summary>
            Get MVID and file name of the project's output file.
            </summary>
            <remarks>
            The MVID is used by the debugger to identify modules loaded into debuggee that correspond to this project.
            The path seems to be unused.
            
            The output file path might be different from the path of the module loaded into the process.
            For example, the binary produced by the C# compiler is stores in obj directory, 
            and then copied to bin directory from which it is loaded to the debuggee.
            
            The binary produced by the compiler can also be rewritten by post-processing tools.
            The debugger assumes that the MVID of the compiler's output file at the time we start debugging session 
            is the same as the MVID of the module loaded into debuggee. The original MVID might be different though.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.EditAndContinue.VsENCRebuildableProjectImpl.EnterBreakStateOnPE(Microsoft.VisualStudio.LanguageServices.Implementation.EditAndContinue.Interop.ENC_BREAKSTATE_REASON,Microsoft.VisualStudio.Shell.Interop.ENC_ACTIVE_STATEMENT[],System.UInt32)">
            <summary>
            Called by the debugger when entering a Break state. 
            </summary>
            <param name="encBreakReason">Reason for transition to Break state.</param>
            <param name="pActiveStatements">Statements active when the debuggee is stopped.</param>
            <param name="cActiveStatements">Length of <paramref name="pActiveStatements"/>.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.EditAndContinue.VsENCRebuildableProjectImpl.GetExceptionSpanCount(System.UInt32@)">
            <summary>
            Returns the number of exception regions around current active statements.
            This is called when the project is entering a break right after 
            <see cref="M:Microsoft.VisualStudio.LanguageServices.Implementation.EditAndContinue.VsENCRebuildableProjectImpl.EnterBreakStateOnPE(Microsoft.VisualStudio.LanguageServices.Implementation.EditAndContinue.Interop.ENC_BREAKSTATE_REASON,Microsoft.VisualStudio.Shell.Interop.ENC_ACTIVE_STATEMENT[],System.UInt32)"/> and prior to <see cref="M:Microsoft.VisualStudio.LanguageServices.Implementation.EditAndContinue.VsENCRebuildableProjectImpl.GetExceptionSpans(System.UInt32,Microsoft.VisualStudio.Shell.Interop.ENC_EXCEPTION_SPAN[],System.UInt32@)"/>.
            </summary>
            <remarks>
            Called by EnC manager.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.EditAndContinue.VsENCRebuildableProjectImpl.GetExceptionSpans(System.UInt32,Microsoft.VisualStudio.Shell.Interop.ENC_EXCEPTION_SPAN[],System.UInt32@)">
            <summary>
            Returns information about exception handlers in the source.
            </summary>
            <remarks>
            Called by EnC manager.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.EditAndContinue.VsENCRebuildableProjectImpl.GetCurrentActiveStatementPosition(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
            <summary>
            Called by the debugger whenever it needs to determine a position of an active statement.
            E.g. the user clicks on a frame in a call stack.
            </summary>
            <remarks>
            Called when applying change, when setting current IP, a notification is received from 
            <see cref="M:Microsoft.VisualStudio.LanguageServices.Implementation.EditAndContinue.Interop.IDebugEncNotify.NotifyEncUpdateCurrentStatement"/>, etc.
            In addition this API is exposed on IDebugENC2 COM interface so it can be used anytime by other components.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.EditAndContinue.VsENCRebuildableProjectImpl.GetENCBuildState(Microsoft.VisualStudio.Shell.Interop.ENC_BUILD_STATE[])">
            <summary>
            Returns the state of the changes made to the source. 
            The EnC manager calls this to determine whether there are any changes to the source 
            and if so whether there are any rude edits.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.EditAndContinue.VsENCRebuildableProjectImpl.GetBaselineEncDebugInfo(System.Reflection.Metadata.MethodDefinitionHandle)">
            <summary>
            Returns EnC debug information for initial version of the specified method.
            </summary>
            <exception cref="T:System.IO.InvalidDataException">The debug information data is corrupt or can't be retrieved from the debugger.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.EditAndContinue.VsENCRebuildableProjectImpl.TryGetCustomDebugInformation(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.EntityHandle,System.Guid,System.Reflection.Metadata.CustomDebugInformation@)">
            <exception cref="T:System.BadImageFormatException">Invalid data format.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.EditAndContinue.VsENCRebuildableProjectImpl.GetCurrentExceptionSpanPosition(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
            <summary>
            Called when changes are being applied.
            </summary>
            <param name="exceptionRegionId">
            The value of <see cref="F:Microsoft.VisualStudio.Shell.Interop.ENC_EXCEPTION_SPAN.id"/>. 
            Set by <see cref="M:Microsoft.VisualStudio.LanguageServices.Implementation.EditAndContinue.VsENCRebuildableProjectImpl.GetExceptionSpans(System.UInt32,Microsoft.VisualStudio.Shell.Interop.ENC_EXCEPTION_SPAN[],System.UInt32@)"/> to the index into <see cref="F:Microsoft.VisualStudio.LanguageServices.Implementation.EditAndContinue.VsENCRebuildableProjectImpl._exceptionRegions"/>. 
            </param>
            <param name="ptsNewPosition">Output value holder.</param>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.Implementation.Experimentation.AnalyzerVsixSuggestedActionCallback._infoBarChecked">
            <summary>
            Tracks when the bar is shown so we don't show to the user more than once per session
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.Implementation.Experimentation.AnalyzerVsixSuggestedActionCallback._experimentationService">
            <summary>
            This service is initialzed by <see cref="M:Microsoft.VisualStudio.LanguageServices.Implementation.Experimentation.AnalyzerVsixSuggestedActionCallback.OnSuggestedActionExecuted(Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction)"/>
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.ExtractInterface.ExtractInterfaceDialog">
            <summary>
            Interaction logic for ExtractInterfaceDialog.xaml
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.LanguageServices.Implementation.ExtractInterface.ExtractInterfaceDialog.TEST_DialogLoaded">
            <summary>
            For test purposes only. The integration tests need to know when the dialog is up and
            ready for automation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.ExtractInterface.ExtractInterfaceDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.GCManager">
            <summary>
            This class manages setting the GC mode to SustainedLowLatency.
            
            It is safe to call from any thread, but is intended to be called from
            the UI thread whenever user keyboard or mouse input is received.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.GCManager.TurnOffLowLatencyMode">
            <summary>
            Turn off low latency GC mode.
            
            if there is a pending low latency mode request, Latency mode will go back to its original status as
            pending request timeout. once it goes back to its original status, it will not go back to low latency mode again.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.GCManager.UseLowLatencyModeForProcessingUserInput">
            <summary>
            Call this method to suppress expensive blocking Gen 2 garbage GCs in
            scenarios where high-latency is unacceptable (e.g. processing typing input).
            
            Blocking GCs will be re-enabled automatically after a short duration unless 
            UseLowLatencyModeForProcessingUserInput is called again.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.GenerateType.GenerateTypeDialog">
            <summary>
            Interaction logic for GenerateTypeDialog.xaml
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.LanguageServices.Implementation.GenerateType.GenerateTypeDialog.TEST_DialogLoaded">
            <summary>
            For test purposes only. The integration tests need to know when the dialog is up and
            ready for automation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.GenerateType.GenerateTypeDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.ICodeModelNavigationPointService.GetStartPoint(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Options.OptionSet,System.Nullable{EnvDTE.vsCMPart})">
            <summary>
            Retrieves the start point of a given node for the specified EnvDTE.vsCMPart.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.ICodeModelNavigationPointService.GetEndPoint(Microsoft.CodeAnalysis.SyntaxNode,Microsoft.CodeAnalysis.Options.OptionSet,System.Nullable{EnvDTE.vsCMPart})">
            <summary>
            Retrieves the end point of a given node for the specified EnvDTE.vsCMPart.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.Interop.CleanableWeakComHandleTable`2">
            <summary>
            Special collection for storing a table of COM objects weakly that provides
            logic for cleaning up dead references in a time-sliced way. Public members of this
            collection are affinitized to the foreground thread.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.Implementation.Interop.CleanableWeakComHandleTable`2.CleanUpThreshold">
            <summary>
            The upper limit of items that the collection will store before clean up is recommended.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.Implementation.Interop.CleanableWeakComHandleTable`2.CleanUpTimeSlice">
            <summary>
            The amount of time that can pass during clean up it returns.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.Interop.CleanableWeakComHandleTable`2.CleanUpDeadObjects">
            <summary>
            Cleans up references to dead objects in the table. This operation will return if it takes
            longer than <see cref="P:Microsoft.VisualStudio.LanguageServices.Implementation.Interop.CleanableWeakComHandleTable`2.CleanUpTimeSlice"/>. Calling <see cref="M:Microsoft.VisualStudio.LanguageServices.Implementation.Interop.CleanableWeakComHandleTable`2.CleanUpDeadObjects"/> further
            times will continue the process.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.Interop.ComAggregate.CreateAggregatedObject(System.Object)">
            <summary>
            This method creates a native COM object that aggregates the passed in managed object.
            The reason we need to do this is to enable legacy managed code that expects managed casts
            expressions to perform a QI on the COM object wrapped by an RCW. These clients are relying
            on the fact that COM type equality is based on GUID, whereas type equality is identity in 
            the managed world.
            Example: IMethodXML is defined many times throughout VS and used by many managed clients
                     dealing with CodeFunction objects. If the CodeFunction objects they deal with are
                     direct references to managed objects, then casts operations are managed casts
                     (as opposed to QI calls), and they fail, since the managed type for IMethodXML
                     have different identity (since they are defined in different assemblies). The QI
                     works, since under the hood, the casts operations are converted to QI with 
                     a GUID which is shared between all these types.
                     The solution to this is to return to these managed clients a native object,
                     which wraps the managed implementation of these interface using aggregation.
                     This means the interfaces will be obtained through QI, while the implementation
                     will be forwarded to the managed implementation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.Interop.ComAggregate.TryGetWrapper(System.Object)">
            <summary>
            Return the RCW for the native IComWrapper instance aggregating "managedObject"
            if there is one. Return "null" if "managedObject" is not aggregated.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.Interop.ComHandle`2">
            <summary>
            Holds onto a managed object as well as the CCW for that object if there is one.
            </summary>
            <typeparam name="THandle">The COM interface type to keep a reference to</typeparam>
            <typeparam name="TObject">The managed object type to keep a reference to</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.Interop.ComHandle`2.#ctor(`0)">
            <summary>
            Create an instance from a "ComObject" or from a managed object.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.Implementation.Interop.ComHandle`2.Handle">
            <summary>
            Return the IComWrapper object (as T) or the managed object (as T) if the managed object is not wrapped.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.Implementation.Interop.ComHandle`2.Object">
            <summary>
            Return the managed object
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.Implementation.Interop.WrapperPolicy.s_ComWrapperFactory">
            <summary>
            Factory object for creating IComWrapper instances.
            Internal and not readonly so that unit tests can provide an alternative implementation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.Interop.WrapperPolicy.TryGetWrapper(System.Object)">
            <summary>
            Return the RCW for the native IComWrapper instance aggregating "managedObject"
            if there is one. Return "null" if "managedObject" is not aggregated.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.Implementation.LanguageService.AbstractLanguageService`2._isSetUp">
            <summary>
            Whether or not we have been set up. This is set once everything is wired up and cleared once tear down has begun.
            </summary>
            <remarks>
            We don't set this until we've completed setup. If something goes sideways during it, we will never register
            with the shell and thus have a floating thing around that can't be safely shut down either. We're in a bad
            state but trying to proceed will only make things worse.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.LanguageService.AbstractLanguageService`2.Setup">
            <summary>
            Setup and TearDown go in reverse order.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.LanguageService.AbstractLanguageService`2.ConnectToServices">
            <summary>
            Keep ConnectToServices and DisconnectFromServices in 1:1 correspondence.
            DisconnectFromServices should clean up resources in the reverse direction that they are
            initialized in.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.LanguageService.AbstractLanguageService`2.Initialize">
            <summary>
            Called right after we instantiate the language service.  Used to set up any internal
            state we need.
            
            Try to keep this method fairly clean.  Any complicated logic should go in methods called
            from this one.  Initialize and Uninitialize go in reverse order 
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.Implementation.LanguageService.AbstractLanguageService`2._debuggerEventsCookie">
            <summary>
            Cookie used to register/unregister from debugger events.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.Implementation.LanguageService.AbstractLanguageService`2._debugMode">
            <summary>
            The current debug mode we are in.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.LanguageService.HACK_AbstractCreateServicesOnUiThread">
            <summary>
            Ensures services that must be constructed on the UI thread are appropriately created during
            the first connection of an applicable subject buffer to an IWpfTextView. This ensures the
            services are available by the time an open document or the interactive window needs them.
            The <see cref="M:Microsoft.VisualStudio.LanguageServices.Implementation.LanguageService.HACK_AbstractCreateServicesOnUiThread.CreateServicesOnUIThread(Microsoft.VisualStudio.ComponentModelHost.IComponentModel,System.String)"/> method should also be
            called during package load to front load some of the work.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.LanguageService.HACK_AbstractCreateServicesOnUiThread.CreateServicesOnUIThread(Microsoft.VisualStudio.ComponentModelHost.IComponentModel,System.String)">
            <summary>
            Must be invoked from the UI thread.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.Library.ObjectBrowser.Extensions.GetProjectNavInfoName(Microsoft.CodeAnalysis.Project)">
            <summary>
            Returns a display name for the given project, walking its parent IVsHierarchy chain and
            pre-pending the names of parenting hierarchies (except the solution).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.Library.ObjectBrowser.ObjectBrowserTaskExtensions.WaitAndGetResult_ObjectBrowser``1(System.Threading.Tasks.Task{``0},System.Threading.CancellationToken)">
            <summary>
            Does a <see cref="M:Roslyn.Utilities.TaskExtensions.WaitAndGetResult``1(System.Threading.Tasks.Task{``0},System.Threading.CancellationToken)"/> for ObjectBrowser.
            </summary>
            <remarks>
            This function is the exact same as <see cref="M:Roslyn.Utilities.TaskExtensions.WaitAndGetResult``1(System.Threading.Tasks.Task{``0},System.Threading.CancellationToken)"/>, except it opts out
            of enforcement that it can be called on non-UI threads. ObjectBrowser, since it must implement a highly blocking API,
            has no choice but to use WaitAndGetResult in a bunch of places. But that's not a good reason to require the tests
            to have thread affinity, since the tests have no specific threading requirements. Thus, it's acceptable for ObjectBrowser
            to call the _CanCallOnBackground variant. We hope to audit _CanCallOnBackground periodically, and so rather than
            having to understand that each of those uses are ObjectBrowser and thus get a special pass.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.Library.VsNavInfo.NavInfo.#ctor(Microsoft.VisualStudio.LanguageServices.Implementation.Library.VsNavInfo.NavInfoFactory,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new NavInfo object that implements <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsNavInfo"/> and <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsNavInfo2"/>.
            </summary>
            <param name="factory">The <see cref="T:Microsoft.VisualStudio.LanguageServices.Implementation.Library.VsNavInfo.NavInfoFactory"/> that created this NavInfo.</param>
            <param name="libraryName">The name of the library (project or assembly) to use for navigation.</param>
            <param name="referenceOwnerName">If this NavInfo is inside of an assembly or project reference, this is the name of the project
            that owns the reference. In general, this is only set when the NavInfo is constructed from the Class View window, where references
            are parented inside of projects.</param>
            <param name="namespaceName">The name of the namespace used for navigation.</param>
            <param name="className">The name of the class used for navigation (should be contained by <paramref name="namespaceName"/>).</param>
            <param name="memberName">The name of the member used for navigation (should be contained by <paramref name="memberName"/>).</param>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.Library.VsNavInfo.NavInfoFactory.GetLibraryName(Microsoft.CodeAnalysis.Project)">
            <summary>
            Returns a display name for the given project, walking its parent IVsHierarchy chain and
            pre-pending the names of parenting hierarchies (except the solution).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.Implementation.Notification.VSNotificationServiceFactory.VSDialogService.NotificationCallback">
            <summary>
            For testing purposes only.  If non-null, this callback will be invoked instead of showing a dialog.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.Options.LanguageSettingsPersister">
            <summary>
            An <see cref="T:Microsoft.CodeAnalysis.Options.IOptionPersister"/> that syncs core language settings against the settings that exist for all languages
            in Visual Studio and whose backing store is provided by the shell. This includes things like default tab size, tabs vs. spaces, etc.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.Implementation.Options.LanguageSettingsPersister._languageMap">
            <summary>
            The mapping between language names and Visual Studio language service GUIDs.
            </summary>
            <remarks>
            This is a map between string and <see cref="T:System.Tuple`1"/> rather than just to <see cref="T:System.Guid"/>
            to avoid a bunch of JIT during startup. Generics of value types like <see cref="T:System.Guid"/> will have to JIT
            but the ngen image will exist for the basic map between two reference types, since those are reused.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.Options.LanguageSettingsPersister.#ctor(System.IServiceProvider,Microsoft.CodeAnalysis.Options.IGlobalOptionService)">
            <remarks>
            We make sure this code is from the UI by asking for all serializers on the UI thread in <see cref="T:Microsoft.VisualStudio.LanguageServices.Implementation.LanguageService.HACK_AbstractCreateServicesOnUiThread"/>.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.Options.LocalUserRegistryOptionPersister">
            <summary>
            Serializes options marked with <see cref="T:Microsoft.CodeAnalysis.Options.LocalUserProfileStorageLocation"/> to the local hive-specific registry.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.Implementation.Options.LocalUserRegistryOptionPersister._gate">
            <summary>
            An object to gate access to <see cref="F:Microsoft.VisualStudio.LanguageServices.Implementation.Options.LocalUserRegistryOptionPersister._registryKey"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.Options.RoamingVisualStudioProfileOptionPersister">
            <summary>
            Serializes settings marked with <see cref="T:Microsoft.CodeAnalysis.Options.RoamingProfileStorageLocation"/> to and from the user's roaming profile.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.Implementation.Options.RoamingVisualStudioProfileOptionPersister._optionsToMonitorForChanges">
            <summary>
            The list of options that have been been fetched from <see cref="F:Microsoft.VisualStudio.LanguageServices.Implementation.Options.RoamingVisualStudioProfileOptionPersister._settingManager"/>, by key. We track this so
            if a later change happens, we know to refresh that value. This is synchronized with monitor locks on
            <see cref="F:Microsoft.VisualStudio.LanguageServices.Implementation.Options.RoamingVisualStudioProfileOptionPersister._optionsToMonitorForChangesGate" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.Options.RoamingVisualStudioProfileOptionPersister.#ctor(Microsoft.CodeAnalysis.Options.IGlobalOptionService,System.IServiceProvider)">
            <remarks>We make sure this code is from the UI by asking for all serializers on the UI thread in <see cref="T:Microsoft.VisualStudio.LanguageServices.Implementation.LanguageService.HACK_AbstractCreateServicesOnUiThread"/>.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.PickMembers.PickMembersDialog">
            <summary>
            Interaction logic for ExtractInterfaceDialog.xaml
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.LanguageServices.Implementation.PickMembers.PickMembersDialog.TEST_DialogLoaded">
            <summary>
            For test purposes only. The integration tests need to know when the dialog is up and
            ready for automation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.PickMembers.PickMembersDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.PreviewPane.PreviewPane.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.Implementation.Progression.GraphBuilder._solution">
            <summary>
            The input solution. Never null.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.Progression.GraphNodeIdCreation">
            <summary>
            A helper class that implements the creation of GraphNodeIds that matches the .dgml creation
            by the metadata progression provider.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.Progression.GraphNodeIdCreation.GetLocalVariableIndexAsync(Microsoft.CodeAnalysis.ISymbol,Microsoft.CodeAnalysis.Solution,System.Threading.CancellationToken)">
            <summary>
            Get the position of where a given local variable is defined considering there could be multiple variables with the same name in method body.
            For example, in "int M() { { int goo = 0; ...} { int goo = 1; ...} }",
            the return value for the first "goo" would be 0 while the value for the second one would be 1.
            It will be used to create a node with LocalVariableIndex for a non-zero value.
            In the above example, hence, a node id for the first "goo" would look like (... Member=M LocalVariable=bar)
            but an id for the second "goo" would be (... Member=M LocalVariable=bar LocalVariableIndex=1)
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.Implementation.Progression.GraphQueryManager._gate">
            <summary>
            This gate locks manipulation of trackedQueries.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.Progression.GraphQueryManager.PopulateContextGraphAsync(Microsoft.CodeAnalysis.Solution,System.Collections.Generic.List{Microsoft.VisualStudio.LanguageServices.Implementation.Progression.IGraphQuery},Microsoft.VisualStudio.GraphModel.IGraphContext)">
            <summary>
            Populate the graph of the context with the values for the given Solution.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.Implementation.Progression.RoslynGraphProperties.SymbolId">
            <summary>
            A graph property that holds the SymbolId of the symbol.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.Implementation.Progression.RoslynGraphProperties.ContextProjectId">
            <summary>
            A graph property that holds the ProjectId where you can find the symbol. Note this is
            not strictly the project that defines the symbol in the case the symbol is from metadata.
            It's simply a project that has a compilation which you can use to get to the symbol.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.Implementation.Progression.RoslynGraphProperties.ContextDocumentId">
            <summary>
            A graph property that holds the DocumentId where you can find the symbol. This is used
            to distinguish between multiple locations for partial types. This will only exist
            for symbols in source that have partial implementations.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.Implementation.Progression.RoslynGraphProperties.Label">
            <summary>
            A graph property to hold the label we have generated for the node.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.Implementation.Progression.RoslynGraphProperties.FormattedLabelWithoutContainingSymbol">
            <summary>
            A graph property to hold the formatted label we have generated for the node.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.Implementation.Progression.RoslynGraphProperties.FormattedLabelWithContainingSymbol">
            <summary>
            A graph property to hold the formatted label that has the containing symbol name.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.Implementation.Progression.RoslynGraphProperties.Description">
            <summary>
            A graph property to hold the description we have generated for the node.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.Implementation.Progression.RoslynGraphProperties.DescriptionWithContainingSymbol">
            <summary>
            A graph property to hold the description that has the containing symbol name.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractProject._untrackedDocuments">
            <summary>
            The list of files which have been added to the project but we aren't tracking since they
            aren't real source files. Sometimes we're asked to add silly things like HTML files or XAML
            files, and if those are open in a strange editor we just bail.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractProject._metadataFileNameToConvertedProjectReference">
            <summary>
            The path to a metadata reference that was converted to project references.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractProject._donotAccessDirectlyChangedReferencesPendingUpdate">
            <summary>
            When a reference changes on disk we start a delayed task to update the <see cref="P:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractProject.Workspace"/>.
            It is delayed for two reasons: first, there are often a bunch of change notifications in quick succession
            as the file is written.  Second, we often get the first notification while something is still writing the
            file, so we're unable to actually load it.  To avoid both of these issues, we wait five seconds before
            reloading the metadata.  This <see cref="T:System.Collections.Generic.Dictionary`2"/> holds on to
            <see cref="T:System.Threading.CancellationTokenSource"/>s that allow us to cancel the existing reload task if another file
            change comes in before we process it.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractProject.IsWebSite">
            <summary>
            Indicates whether this project is a website type.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractProject.ObjOutputPath">
            <summary>
            A full path to the project obj output binary, or null if the project doesn't have an obj output binary.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractProject.BinOutputPath">
            <summary>
            A full path to the project bin output binary, or null if the project doesn't have an bin output binary.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractProject.Hierarchy">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy"/> for this project.  NOTE: May be null in Deferred Project Load cases.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractProject.Guid">
            <summary>
            Guid of the project
            
            it is not readonly since it can be changed while loading project
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractProject.ContainingDirectoryPathOpt">
            <summary>
            The containing directory of the project. Null if none exists (consider Venus.)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractProject.ProjectFilePath">
            <summary>
            The full path of the project file. Null if none exists (consider Venus.)
            Note that the project file path might change with project file rename.
            If you need the folder of the project, just use <see cref="P:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractProject.ContainingDirectoryPathOpt" /> which doesn't change for a project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractProject.DisplayName">
            <summary>
            The public display name of the project. This name is not unique and may be shared
            between multiple projects, especially in cases like Venus where the intellisense
            projects will match the name of their logical parent project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractProject.ProjectSystemName">
            <summary>
            The name of the project according to the project system. In "regular" projects this is
            equivalent to <see cref="P:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractProject.DisplayName"/>, but in Venus cases these will differ. The
            ProjectSystemName is the 2_Default.aspx project name, whereas the regular display name
            matches the display name of the project the user actually sees in the solution explorer.
            These can be assumed to be unique within the Visual Studio workspace.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractProject.LastDesignTimeBuildSucceeded">
            <summary>
            Flag indicating if the latest design time build has succeeded for current project state.
            </summary>
            <remarks>Default value is true.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractProject.ValidateReferences">
            <summary>
            Override this method to validate references when creating <see cref="T:Microsoft.CodeAnalysis.ProjectInfo"/> for current state.
            By default, this method does nothing.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractProject.GetProjectAnalyzersMap">
            <summary>
            Returns a map from full path to <see cref="T:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioAnalyzer"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractProject.OnImportChanged(System.Object,System.EventArgs)">
            <summary>
            Called when a referenced metadata file changes on disk.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractProject.CrashOnException">
            <summary>
            Used for unit testing: don't crash the process if something bad happens.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractProject._lastParsedCommandLineArguments">
            Can be null if there is no <see cref="P:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractProject.CommandLineParserService" /> available.
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractProject.UpdateOptions">
            <summary>
            Creates and sets new options using the last parsed command line arguments.  In the case that the last
            parsed options are <see langword="null"/> then this call is a NOP.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractProject.SetArgumentsAndUpdateOptions(System.String)">
            <summary>
            Parses the given command line and sets new command line arguments.
            Subsequently, creates and sets new options using the last parsed command line arguments.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractProject.ResetArgumentsAndUpdateOptions">
            <summary>
            Resets the last parsed command line and updates options with the same command line.
            </summary>
            <remarks>
            Use this method when options can go stale due to side effects, even though the command line is identical.
            For example, changes to contents of a ruleset file needs to force update the options for the same command line.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractProject.SetArguments(System.String)">
            <summary>
            Parses the given command line and sets new command line arguments.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractProject.SetOptions(Microsoft.CodeAnalysis.CompilationOptions,Microsoft.CodeAnalysis.ParseOptions)">
            <summary>
            Sets the given compilation and parse options.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractProject.CreateCompilationOptions(Microsoft.CodeAnalysis.CommandLineArguments,Microsoft.CodeAnalysis.ParseOptions)">
            <summary>
            Creates new compilation options from parsed command line arguments, with additional workspace specific options appended.
            It is expected that derived types which need to add more specific options will fetch the base options and override those options.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractProject.CreateParseOptions(Microsoft.CodeAnalysis.CommandLineArguments)">
            <summary>
            Creates new parse options from parsed command line arguments (with overridden default DocumentationMode).
            It is expected that derived types which need to add more specific options will fetch the base options and override those options.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.DocumentKey">
            <summary>
            Represents the information which uniquely defines a document -- the project which contains
            it and the moniker.
            
            Immutable, since this object is used as a key into some dictionaries.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.DocumentProvider">
            <summary>
            This service provides a central place where the workspace/project system layer may create
            Document objects that represent items from the project system. These IDocuments are useful
            in that they watch the running document table, tracking open/close events, and also file
            change events while the file is closed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.DocumentProvider._documentMap">
            <summary>
            The core data structure of this entire class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.DocumentProvider.#ctor(Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.IVisualStudioHostProjectContainer,System.IServiceProvider,Microsoft.VisualStudio.LanguageServices.Implementation.VisualStudioDocumentTrackingService)">
            <summary>
            Creates a document provider.
            </summary>
            <param name="projectContainer">Project container for the documents.</param>
            <param name="serviceProvider">Service provider</param>
            <param name="documentTrackingService">An optional <see cref="T:Microsoft.VisualStudio.LanguageServices.Implementation.VisualStudioDocumentTrackingService"/> to track active and visible documents.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.DocumentProvider.TryGetDocumentForFile(Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.IVisualStudioHostProject,System.String,Microsoft.CodeAnalysis.SourceCodeKind,System.Func{Microsoft.VisualStudio.Text.ITextBuffer,System.Boolean},System.Func{System.UInt32,System.Collections.Generic.IReadOnlyList{System.String}},System.EventHandler,System.EventHandler{System.Boolean},System.EventHandler{System.Boolean})">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.IVisualStudioHostDocument"/> for the file at the given filePath.
            If we are on the foreground thread and this document is already open in the editor,
            then we also attempt to associate the text buffer with it.
            Otherwise, if we are on a background thread, then this text buffer association will happen on a scheduled task
            whenever <see cref="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.DocumentProvider.NotifyDocumentRegisteredToProjectAndStartToRaiseEvents(Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.IVisualStudioHostDocument)"/> is invoked for the returned document.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.DocumentProvider.TryGetTextBufferFromDocData(System.Object)">
            <summary>
            Tries to return an ITextBuffer representing the document from the document's DocData.
            </summary>
            <param name="docData">The DocData from the running document table.</param>
            <returns>The ITextBuffer. If one could not be found, this returns null.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.DocumentProvider.NotifyDocumentRegisteredToProjectAndStartToRaiseEvents(Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.IVisualStudioHostDocument)">
            <summary>
            Notifies the document provider that this document is now registered in a project.
            If we are on a foregroud thread, then this is done right away.
            Otherwise, we schedule a task on foreground task scheduler.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.DocumentProvider.CloseDocuments(System.UInt32,System.String)">
            <summary>
            Closes all documents that match the cookie and predicate.
            </summary>
            <param name="docCookie">The cookie that we should close documents for.</param>
            <param name="monikerToKeep">The moniker that we should _not_ close documents for. When a rename is happening,
            we might have documents with both the old and new moniker attached to the same docCookie. In those cases
            we only want to close anything that doesn't match the new name. Can be null to close everything.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.DocumentProvider.StopTrackingDocument(Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.DocumentProvider.StandardTextDocument)">
            <summary>
            Called by a VisualStudioDocument when that document is disposed.
            </summary>
            <param name="document">The document to stop tracking.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.DocumentProvider.DocumentIdHint">
            <summary>
            A small IDisposable object that's returned from ProvideDocumentIdHint.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.DocumentProvider.StandardTextDocument._documentProvider">
            <summary>
            The IDocumentProvider that created us.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.DocumentProvider.StandardTextDocument._openTextBuffer">
            <summary>
            The text buffer that is open in the editor. When the file is closed, this is null.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.DocumentProvider.StandardTextDocument.#ctor(Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.DocumentProvider,Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.IVisualStudioHostProject,Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.DocumentKey,System.Func{System.UInt32,System.Collections.Generic.IReadOnlyList{System.String}},Microsoft.CodeAnalysis.SourceCodeKind,Microsoft.VisualStudio.Text.Operations.ITextUndoHistoryRegistry,Microsoft.VisualStudio.Shell.Interop.IVsFileChangeEx,Microsoft.VisualStudio.Text.ITextBuffer,Microsoft.CodeAnalysis.DocumentId,System.EventHandler,System.EventHandler{System.Boolean},System.EventHandler{System.Boolean})">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.DocumentProvider.StandardTextDocument"/>.
            <para>Note: getFolderNames maps from a VSITEMID to the folders this document should be contained in.</para>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.DocumentProvider.TextBufferDataEventsSink.HookupHandler(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.Action)">
            <summary>
            Helper method for creating and hooking up a <c>TextBufferDataEventsSink</c>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.FileChangeTracker._fileChangeCookie">
            <summary>
            The cookie received from the IVsFileChangeEx interface that is watching for changes to
            this file. This field may never be null, but might be a Lazy that has a value of null if
            we either failed to subscribe over never have tried to subscribe.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.FileChangeTracker.s_lastBackgroundTask">
            <summary>
            Operations on <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsFileChangeEx"/> synchronize on a single lock within that service, so there's no point
            in us trying to have multiple threads all trying to use it at the same time. When we queue a new background thread operation
            we'll just do a continuation after the previous one. Any callers of <see cref="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.FileChangeTracker.EnsureSubscription"/> will bypass that queue
            and ensure it happens quickly.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.FileChangeTracker.s_lastBackgroundTaskGate">
            <summary>
            The object to use as a monitor guarding <see cref="F:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.FileChangeTracker.s_lastBackgroundTask"/>. This lock is not strictly necessary, since we don't need
            to ensure the background tasks happen entirely sequentially -- if we just removed the lock, and two subscriptions happened, we end up with
            a 'branching' set of continuations, but that's fine since we're generally not running things in parallel. But it's easy to write,
            and easy to delete if this lock has contention itself. Given we tend to call <see cref="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.FileChangeTracker.StartFileChangeListeningAsync"/> on the UI
            thread, I don't expect to see contention.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.IDeferredProjectWorkspaceService.GetDeferredProjectInfoForConfigurationAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns a mapping of project file path to information about that project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.DeferredProjectInformation.TargetPath">
            <summary>
            The full path to the binary this project would create if built *by msbuild*.
            May be different than the /out argument in <see cref="P:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.DeferredProjectInformation.CommandLineArguments"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.DeferredProjectInformation.CommandLineArguments">
            <summary>
            The set of command line arguments that can be used to build this project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.DeferredProjectInformation.ReferencedProjectFilePaths">
            <summary>
            The paths to referenced projects.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.IEntryPointFinderService.FindEntryPoints(Microsoft.CodeAnalysis.INamespaceSymbol,System.Boolean)">
            <summary>
            Finds the types that contain entry points like the Main method in a give namespace.
            </summary>
            <param name="symbol">The namespace to search.</param>
            <param name="findFormsOnly">Restrict the search to only Windows Forms classes. Note that this is only implemented for VisualBasic</param>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.Interop.ICompilerOptionsHostObject">
            <summary>
            An internal redefinition of ICompilerOptionsHostObject from Microsoft.CodeAnalysis.BuildTasks. We cannot take
            a binary dependency on the build task because no component in Visual Studio may do so -- we cannot rely that any
            specific version of the build task is present since the customer may have a NuGet package installed that contains
            different versions. Since this a COM interface, it's easiest to redefine.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.Interop.IIntPtrReturningVsInvisibleEditorManager">
            <remarks>
            A redefinition of Microsoft.VisualStudio.Shell.Interop.IVsInvisibleEditorManager. One critical difference
            here is we declare the ppEditor retval argument as IntPtr instead of IVsInvisibleEditor. Since the
            invisible editor is saved and closed when the last reference is Released(), it's critical we have precise
            control when the COM object goes away. By default, the COM marshaller will return a non-unique RCW, which
            means we have no control over when the RCW will call Release(). To have control, we need a unique RCW, but
            the only way we can (correctly) get this is if we have the native IntPtr right from the start.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.InvisibleEditor._buffer">
            <summary>
            The text buffer. null if the object has been disposed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.InvisibleEditor.#ctor(System.IServiceProvider,System.String,Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.IVisualStudioHostProject,System.Boolean,System.Boolean)">
            <remarks>
            <para>The optional project is used to obtain an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProject"/> 1nstance. When this instance is
            provided, Visual Studio will use <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsProject.IsDocumentInProject(System.String,System.Int32@,Microsoft.VisualStudio.Shell.Interop.VSDOCUMENTPRIORITY[],System.UInt32@)"/> to attempt to locate the
            specified file within a project. If no project is specified, Visual Studio falls back to using
            <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument4.IsDocumentInAProject2(System.String,System.Boolean,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy@,System.UInt32@,Microsoft.VisualStudio.OLE.Interop.IServiceProvider@)"/>, which performs a much slower query of all
            projects in the solution.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.InvisibleEditor.Dispose">
            <summary>
            Closes the invisible editor and saves the underlying document as appropriate.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.IVisualStudioHostDocument">
            <summary>
            Represents a source document that comes from the <see cref="T:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.DocumentProvider"/> used in Visual Studio.
            </summary>
            <remarks>
            It guarantees the existence of a Dispose method, which allows the workspace/project system layer to clean up file system watchers for this
            document when they are no longer needed.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.IVisualStudioHostDocument.Project">
            <summary>
            The visual studio project this document is part of.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.IVisualStudioHostDocument.Key">
            <summary>
            The Visual Studio identity of the document within its project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.IVisualStudioHostDocument.Id">
            <summary>
            The workspace document Id for this document.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.IVisualStudioHostDocument.FilePath">
            <summary>
            The path to the document's file on disk.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.IVisualStudioHostDocument.Name">
            <summary>
            The name of the document.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.IVisualStudioHostDocument.Folders">
            <summary>
            The logical folders associated with the document. This may be different than the actual folders
            in the file path.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.IVisualStudioHostDocument.Loader">
            <summary>
            A loader that can access the current stored text of the document.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.IVisualStudioHostDocument.IsOpen">
            <summary>
            Returns true if the document is currently open in an editor.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.IVisualStudioHostDocument.UpdatedOnDisk">
            <summary>
            Fired after the file is updated on disk. If the file is open in the editor, this event is not fired.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.IVisualStudioHostDocument.Opened">
            <summary>
            Fired after the document has been opened in Visual Studio. GetTextBuffer() will return the actual live
            editor.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.IVisualStudioHostDocument.Closing">
            <summary>
            Fired as the document is being closed in Visual Studio. GetTextBuffer() still returns the editor that was
            live in Visual Studio, but is going away shortly.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.IVisualStudioHostDocument.GetInitialState">
            <summary>
            Returns and IDocumentInfo with the initial state of this document when it was first loaded.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.IVisualStudioHostDocument.GetItemId">
            <summary>
            The ItemID for this document. This method must be called on the UI thread, and the 
            returned value must be used while still on the UI thread, or must be appropriately
            invalidated when the relevant <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents"/> are triggered. 
            Otherwise, this ItemId may be stale or destroyed within its <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy"/>
            before this document is removed from its project. These are only really useful for 
            "normal" files, that is regular .cs files that are compiled in a normal project. 
            It may be <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID.Nil"/> in the case of files that have very
            recently been removed or that are in miscellaneous files projects, or it may not even
            be stable in the case of strange files like .g.i.cs files.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.IVisualStudioHostDocument.GetOpenTextContainer">
            <summary>
            Gets the text container associated with the document when it is in an opened state.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.IVisualStudioHostDocument.GetOpenTextBuffer">
            <summary>
            Gets the text buffer associated with the document when it is in an opened state.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.IVisualStudioHostDocument.UpdateText(Microsoft.CodeAnalysis.Text.SourceText)">
            <summary>
            Updates the text of the document.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.IVisualStudioHostDocument.GetTextUndoHistory">
            <summary>
            Fetches the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory"/> that should be used to undo edits to this document.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.IVisualStudioHostProject">
            <summary>
            The interface implemented by all types of projects within Visual Studio (like regular
            projects, Miscellaneous files projects, etc.)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.IVisualStudioHostProject.Hierarchy">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy"/> for this project.  NOTE: May be null in Deferred Project Load cases.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.IVisualStudioHostProject.DisplayName">
            <summary>
            The public display name of the project. This name is not unique and may be shared
            between multiple projects, especially in cases like Venus where the intellisense
            projects will match the name of their logical parent project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.IVisualStudioHostProject.ProjectSystemName">
            <summary>
            The name of the project according to the project system. In "regular" projects this is
            equivalent to <see cref="P:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.IVisualStudioHostProject.DisplayName"/>, but in Venus cases these will differ. The
            ProjectSystemName is the 2_Default.aspx project name, whereas the regular display name
            matches the display name of the project the user actually sees in the solution explorer.
            These can be assumed to be unique within the Visual Studio workspace.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.IVisualStudioHostProjectContainer">
            <summary>
            An interface implemented by a workspace to get the set of host projects contained in the
            workspace.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.IVisualStudioWorkingFolder">
            <summary>
            Support VS working folder.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.Legacy.AbstractLegacyProject">
            <summary>
            Base type for legacy C# and VB project system shim implementations.
            These legachy shims are based on legacy project system interfaces defined in csproj/msvbprj.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.Legacy.AbstractLegacyProject.ProjectType">
            <summary>
            string (Guid) of the Hierarchy project type
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.LinkedFileUtilities.GetContextHierarchy(Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.IVisualStudioHostDocument,Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable4)">
            <summary>
            Finds the current context hierarchy for the given document. If the document is in a
            Shared Code project, this returns that project's SharedItemContextHierarchy. If the
            document is linked into multiple projects, this returns the hierarchy in which it is
            currently open as indicated by the running document table. Otherwise, it returns the
            hierarchy of the document's project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.LinkedFileUtilities.GetContextHierarchyFromRunningDocumentTable(Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.IVisualStudioHostDocument,Microsoft.VisualStudio.Shell.Interop.IVsRunningDocumentTable4)">
            <summary>
            If the document is open in the running document table, this returns the hierarchy in
            which it is currently open. Otherwise, it returns null.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.LinkedFileUtilities.GetSharedItemContextHierarchy(Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.IVisualStudioHostDocument)">
            <summary>
            If the document is in a Shared Code project, this returns that project's 
            SharedItemContextHierarchy. Otherwise, it returns null. 
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.LinkedFileUtilities.GetSharedItemContextHierarchy(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            If the project is in a Shared Code project, this returns its 
            SharedItemContextHierarchy. Otherwise, it returns null.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.LinkedFileUtilities.GetSharedHierarchyForItem(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)">
            <summary>
            If the itemId represents a document from a Shared Code project, this returns the 
            SharedProjectHierarchy to which it belongs. Otherwise, it returns null.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.LinkedFileUtilities.IsProjectKProject(Microsoft.CodeAnalysis.Project)">
            <summary>
            Check whether given project is project k project.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioMetadataReference.Snapshot">
            <summary>
            Represents a metadata reference corresponding to a specific version of a file.
            If a file changes in future this reference will still refer to the original version.
            </summary>
            <remarks>
            The compiler observes the metadata content a reference refers to by calling <see cref="M:Microsoft.CodeAnalysis.PortableExecutableReference.GetMetadataImpl"/>
            and the observed metadata is memoized by the compilation. However we drop compilations to decrease memory consumption. 
            When the compilation is recreated for a solution the compiler asks for metadata again and we need to provide the original content,
            not read the file again. Therefore we need to save the timestamp on the <see cref="T:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioMetadataReference.Snapshot"/>.
            
            When the VS observes a change in a metadata reference file the <see cref="P:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioMetadataReference.Project"/> version is advanced and a new instance of 
            <see cref="T:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioMetadataReference.Snapshot"/> is created for the corresponding reference.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioMetadataReferenceManager">
            <summary>
            Manages metadata references for VS projects. 
            </summary>
            <remarks>
            They monitor changes in the underlying files and provide snapshot references (subclasses of <see cref="T:Microsoft.CodeAnalysis.PortableExecutableReference"/>) 
            that can be passed to the compiler. These snapshot references serve the underlying metadata blobs from a VS-wide storage, if possible, 
            from <see cref="T:Microsoft.CodeAnalysis.Host.ITemporaryStorageService"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioMetadataReferenceManager.SmartOpenScopeServiceOpt">
            <summary>
            The smart open scope service. This can be null during shutdown when using the service might crash. Any
            use of this field or derived types should be synchronized with <see cref="F:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioMetadataReferenceManager._readerWriterLock"/> to ensure
            you don't grab the field and then use it while shutdown continues.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioMetadataReferenceManager.GetMetadata(System.String,System.DateTime)">
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.BadImageFormatException" />
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioMetadataReferenceManager.CreateAssemblyMetadataFromTemporaryStorage(Roslyn.Utilities.FileKey,System.Collections.Generic.List{Microsoft.CodeAnalysis.Host.ITemporaryStreamStorage})">
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.BadImageFormatException" />
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioMetadataReferenceManager.TryCreateAssemblyMetadataFromMetadataImporter(Roslyn.Utilities.FileKey,Microsoft.CodeAnalysis.AssemblyMetadata@)">
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.BadImageFormatException" />
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioMetadataReferenceManager.CreateAssemblyMetadata(Roslyn.Utilities.FileKey,Microsoft.CodeAnalysis.ModuleMetadata,System.Collections.Generic.List{Microsoft.CodeAnalysis.Host.ITemporaryStreamStorage},System.Func{Roslyn.Utilities.FileKey,System.Collections.Generic.List{Microsoft.CodeAnalysis.Host.ITemporaryStreamStorage},Microsoft.CodeAnalysis.ModuleMetadata})">
            <exception cref="T:System.IO.IOException"/>
            <exception cref="T:System.BadImageFormatException" />
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.MiscellaneousFilesScriptEnvironmentService">
            <summary>
            Environment corresponding to csi running a script with default command line arguments.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.MiscellaneousFilesWorkspace._docCookieToWorkspaceRegistration">
            <summary>
            <see cref="T:Microsoft.CodeAnalysis.WorkspaceRegistration"/> instances for all open buffers being tracked by by this object
            for possible inclusion into this workspace.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.MiscellaneousFilesWorkspace.TryUntrackClosingDocument(System.UInt32,System.String)">
            <summary>
            Stops tracking a document in the RDT for whether we should attach to it.
            </summary>
            <returns>true if we were previously tracking it.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioAnalyzer.AnalyzerAssemblyLoaderThatEnsuresFileBeingWatched">
            <summary>
            This custom loader just wraps an existing loader, but ensures that we start listening to the file
            for changes once we've actually looked at the file.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioAnalyzer.VisualStudioUnresolvedAnalyzerReference">
            <summary>
            This custom <see cref="T:Microsoft.CodeAnalysis.Diagnostics.AnalyzerReference"/>, just wraps an existing <see cref="T:Microsoft.CodeAnalysis.Diagnostics.UnresolvedAnalyzerReference"/>,
            but ensure that we start listening to the file for changes once we've actually observed it, so that if the
            file then gets created on disk, we are notified.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProjectTracker._batchingProjectLoads">
            <summary>
            Set to true while we're batching project loads. That is, between
            <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionLoadEvents.OnBeforeLoadProjectBatch(System.Boolean)" /> and
            <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionLoadEvents.OnAfterLoadProjectBatch(System.Boolean)"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProjectTracker._projectsLoadedThisBatch">
            <summary>
            The list of projects loaded in this batch between <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionLoadEvents.OnBeforeLoadProjectBatch(System.Boolean)" /> and
            <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionLoadEvents.OnAfterLoadProjectBatch(System.Boolean)"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProjectTracker._solutionIsClosing">
            <summary>
            Set to true while the solution is in the process of closing. That is, between
            <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents.OnBeforeCloseSolution(System.Object)"/> and <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents.OnAfterCloseSolution(System.Object)"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProjectTracker._deferredLoadWasEnabledForLastSolution">
            <summary>
            Set during <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents.OnBeforeCloseSolution(System.Object)"/>, so that <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionEvents.OnAfterCloseSolution(System.Object)"/> knows
            whether or not to clean up deferred projects.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProjectTracker._solutionLoadComplete">
            <summary>
            Set to true once the solution has already been completely loaded and all future changes
            should be pushed immediately to the workspace hosts. This may not actually result in changes
            being pushed to a particular host if <see cref="P:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProjectTracker.WorkspaceHostState.HostReadyForEvents"/> isn't true yet.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProjectTracker._projectsByBinPath">
            <summary>
            This is a multi-map, only so we don't have any edge cases if people have two projects with
            the same output path. It makes state tracking notably easier.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProjectTracker._solutionParsingCancellationTokenSource">
            <summary>
            Used to cancel our background solution parse if we get a solution close event from VS.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProjectTracker.Projects">
            <summary>
            Provided to not break CodeLens which has a dependency on this API until there is a
            public release which calls <see cref="P:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProjectTracker.ImmutableProjects"/>.  Once there is, we should
            change this back to returning <see cref="T:System.Collections.Immutable.ImmutableArray`1"/>, and 
            Obsolete <see cref="P:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProjectTracker.ImmutableProjects"/> instead, and then remove that after a
            second public release.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProjectTracker.AddProject(Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractProject)">
            <summary>
            Add a project to the workspace.
            </summary>
            <remarks>This method must be called on the foreground thread.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProjectTracker.StartPushingToWorkspaceAndNotifyOfOpenDocuments(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractProject})">
            <summary>
            Starts pushing events from the given projects to the workspace hosts and notifies about open documents.
            </summary>
            <remarks>This method must be called on the foreground thread.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProjectTracker.RemoveProject(Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractProject)">
            <summary>
            Remove a project from the workspace.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProjectTracker.UpdateProjectBinPath(Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractProject,System.String,System.String)">
            <summary>
            Updates the project tracker and referencing projects for binary output path change for the given project.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProjectTracker.GetOrCreateProjectIdForPath(System.String,System.String)">
            <summary>
            Gets or creates a project ID for the given project file path and display name.
            </summary>
            <remarks>This method may be called on a background thread.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProjectTracker.NotifyWorkspaceHosts(System.Action{Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.IVisualStudioWorkspaceHost})">
            <summary>
            Notifies the workspace host about the given action.
            </summary>
            <remarks>This method must be called on the foreground thread.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProjectTracker.TryGetProjectByBinPath(System.String,Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractProject@)">
            <summary>
            Attempts to get single project by given output binary filePath.
            </summary>
            <remarks>This method may be called on a background thread.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProjectTracker.TryGetProjectsByBinPath(System.String,System.Collections.Immutable.ImmutableArray{Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.AbstractProject}@)">
            <summary>
            Attempts to get the projects by given output binary filePath.
            </summary>
            <remarks>This method may be called on a background thread.</remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProjectTracker.WorkspaceHostState._solutionAdded">
            <summary>
            Set to true if we've already called <see cref="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.IVisualStudioWorkspaceHost.OnSolutionAdded(Microsoft.CodeAnalysis.SolutionInfo)"/>
            for this host. Set to false after the solution has closed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProjectTracker.WorkspaceHostState.HostReadyForEvents">
            <summary>
            Whether or not the project tracker has been notified that it should start to push state
            to the <see cref="T:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.IVisualStudioWorkspaceHost"/> or not.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl">
            <summary>
            The Workspace for running inside Visual Studio.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl._foregroundObject">
            <summary>
            A <see cref="T:Microsoft.CodeAnalysis.Editor.Shared.Utilities.ForegroundThreadAffinitizedObject"/> to make assertions that stuff is on the right thread.
            This is Lazy because it might be created on a background thread when nothing is initialized yet.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.DeferredState">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.DeferredInitializationState"/> that consists of the <see cref="T:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProjectTracker" />
            and other UI-initialized types. It will be created as long as a single project has been created.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.GetProjectTrackerAndInitializeIfNecessary(System.IServiceProvider)">
            <summary>
            Ensures the workspace is fully hooked up to the host by subscribing to all sorts of VS
            UI thread affinitized events.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.ProjectTracker">
            <summary>
            A compatibility shim to ensure that F# and TypeScript continue to work after the deferred work goes in. This will be
            removed once they move to calling <see cref="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.GetProjectTrackerAndInitializeIfNecessary(System.IServiceProvider)"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.GetDocumentIdInCurrentContext(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            Finds the <see cref="T:Microsoft.CodeAnalysis.DocumentId"/> related to the given <see cref="T:Microsoft.CodeAnalysis.DocumentId"/> that
            is in the current context. For regular files (non-shared and non-linked) and closed
            linked files, this is always the provided <see cref="T:Microsoft.CodeAnalysis.DocumentId"/>. For open linked
            files and open shared files, the active context is already tracked by the
            <see cref="N:Microsoft.VisualStudio.Workspace"/> and can be looked up directly. For closed shared files, the
            document in the shared project's <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID7.VSHPROPID_SharedItemContextHierarchy"/> 
            is preferred.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.VisualStudioWorkspaceHost">
            <summary>
            A trivial implementation of <see cref="T:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.IVisualStudioWorkspaceHost" /> that just
            forwards the calls down to the underlying Workspace.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.DeferredInitializationState">
            <summary>
            The class that's created once the <see cref="T:Microsoft.VisualStudio.LanguageServices.VisualStudioWorkspace"/> is finally
            getting content inside of it. We have various bits of the implementation
            of this workspace that need to start up on the UI thread, but we cannot
            guarantee which thread will create the <see cref="T:Microsoft.VisualStudio.LanguageServices.VisualStudioWorkspace"/>,
            since it could be MEF imported on any thread. This class holds all that "real" state
            which can't be touched during construction or in any codepath that
            might run before a project is added.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.IsDeferredSolutionLoadEnabled(System.IServiceProvider)">
            <summary>
            Returns whether the solution overall has Lightweight solution load enabled,  either
            through the global option in Tools\Options, or the .suo specific option.
            
            NOTE: Does *NOT* mean that all projects in the solution are deferred.  Project types
            can opt out.  Use <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSolution7.IsDeferredProjectLoadAllowed(System.String)"/> to
            see if a specific project can be deferred.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.Implementation.ReiteratedVersionSnapshotTracker._trackingBuffer">
            <summary>
            tracking text buffer
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.Implementation.ReiteratedVersionSnapshotTracker._latestReiteratedVersionSnapshot">
            <summary>
            hold onto latest ReiteratedVersionNumber snapshot of a textbuffer
            there is a bug where many of our features just assume that if they wait, they will end up get the latest snapshot in some ways. 
            but, unfortunately that is actually not true. they will, at the end, get latest reiterated version snapshot but 
            not the latest version snapshot since we might have skipped/swallowed the latest snapshot since its content didn't change.
            this is especially unfortunate for features that want to move back and forth between source text and ITextSnapshot since holding
            on the latest snapshot won't guarantee that. so, in VS, we hold onto right latest snapshot in VS workspace so that all feature under it
            doesn't need to worry about it.
            this could be moved down to workspace_editor if it actually move up to editor layer. 
            but for now, I am putting it here. we can think about moving it down to workspace_editor later.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.SaveEventsService.TryGetTextBufferFromDocData(System.IntPtr)">
            <summary>
            Tries to return an ITextBuffer representing the document from the document's DocData.
            </summary>
            <param name="docData">The DocData from the running document table.</param>
            <returns>The ITextBuffer. If one could not be found, this returns null.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.Snippets.AbstractSnippetExpansionClient.SetEndPositionIfNoneSpecified(Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession)">
            <summary>
            If there was no $end$ token, place it at the end of the snippet code. Otherwise, it
            defaults to the beginning of the snippet code.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.Snippets.AbstractSnippetExpansionClient.PositionCaretForEditingInternal(System.String,System.Int32)">
            <summary>
            Internal for testing purposes. All real caret positioning logic takes place here. <see cref="M:Microsoft.VisualStudio.LanguageServices.Implementation.Snippets.AbstractSnippetExpansionClient.PositionCaretForEditing(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])"/>
            only extracts the <paramref name="endLineText"/> and <paramref name="endLinePosition"/> from the provided <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines"/>.
            Tests can call this method directly to avoid producing an IVsTextLines.
            </summary>
            <param name="endLineText"></param>
            <param name="endLinePosition"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.Snippets.AbstractSnippetInfoService">
            <summary>
            This service is created on the UI thread during package initialization, but it must not
            block the initialization process.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.Implementation.Snippets.AbstractSnippetInfoService.snippets">
            <summary>
            Initialize these to empty values. When returning from <see cref="M:Microsoft.VisualStudio.LanguageServices.Implementation.Snippets.AbstractSnippetInfoService.GetSnippetsIfAvailable"/> 
            and <see cref="M:Microsoft.VisualStudio.LanguageServices.Implementation.Snippets.AbstractSnippetInfoService.SnippetShortcutExists_NonBlocking(System.String)"/>, we return the current set of known 
            snippets rather than waiting for initial results.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.Snippets.AbstractSnippetInfoService.PopulateSnippetCacheFromExpansionEnumeration(Microsoft.VisualStudio.TextManager.Interop.IVsExpansionEnumeration)">
             <remarks>
             This method must be called on the UI thread because it eventually calls into
             IVsExpansionEnumeration.Next, which must be called on the UI thread due to an issue
             with how the call is marshalled.
             
             The second parameter for IVsExpansionEnumeration.Next is defined like this:
                [ComAliasName("Microsoft.VisualStudio.TextManager.Interop.VsExpansion")] IntPtr[] rgelt
            
             We pass a pointer for rgelt that we expect to be populated as the result. This
             eventually calls into the native CExpansionEnumeratorShim::Next method, which has the
             same contract of expecting a non-null rgelt that it can drop expansion data into. When
             we call from the UI thread, this transition from managed code to the
             CExpansionEnumeratorShim` goes smoothly and everything works.
            
             When we call from a background thread, the COM marshaller has to move execution to the
             UI thread, and as part of this process it uses the interface as defined in the idl to
             set up the appropriate arguments to pass. The same parameter from the idl is defined as
                [out, size_is(celt), length_is(*pceltFetched)] VsExpansion **rgelt
            
             Because rgelt is specified as an `out` parameter, the marshaller is discarding the
             pointer we passed and substituting the null reference. This then causes a null
             reference exception in the shim. Calling from the UI thread avoids this marshaller.
             </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.Snippets.AbstractSnippetInfoService.VsExpansionWithIntPtrs">
            <summary>
            This structure is used to facilitate the interop calls with IVsExpansionEnumeration.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.Snippets.IVsContainedLanguageHostInternal">
            <summary>
            Redefine IVsContainedLanguageHost so we can call InsertImportsDirective which would 
            otherwise expect the namespace string as a ushort.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.Snippets.IVsExpansionSessionInternal">
            <summary>
            This allows us to get pNode as an IntPtr instead of a via a RCW. Otherwise, a second 
            invocation of the same snippet may cause an AccessViolationException.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.Snippets.IVsExpansionSessionInternal.GetSnippetNode(System.String,System.IntPtr@)">
            <summary>
            WARNING: Marshal pNode with GetUniqueObjectForIUnknown and call ReleaseComObject on it
            before leaving the calling method.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.StandaloneCommandFilter`2">
            <summary>
            A CommandFilter used for "normal" files, as opposed to Venus files which are special.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.StandaloneCommandFilter`2.#ctor(`1,Microsoft.VisualStudio.Text.Editor.IWpfTextView,Microsoft.CodeAnalysis.Editor.ICommandHandlerServiceFactory,Microsoft.VisualStudio.Editor.IVsEditorAdaptersFactoryService)">
            <summary>
            Creates a new command handler that is attached to an IVsTextView.
            </summary>
            <param name="wpfTextView">The IWpfTextView of the view.</param>
            <param name="commandHandlerServiceFactory">The MEF imported ICommandHandlerServiceFactory.</param>
            <param name="editorAdaptersFactoryService">The editor adapter</param>
            <param name="languageService">The language service</param>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.TableDataSource.AbstractRoslynTableDataSource`1">
            <summary>
            A version of ITableDataSource who knows how to connect them to Roslyn solution crawler for live information.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.TableDataSource.AbstractTable">
            <summary>
            Base implementation of new platform table. this knows how to create various ITableDataSource and connect
            them to ITableManagerProvider
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.TableDataSource.AbstractTableDataSource`1">
            <summary>
            Base implementation of ITableDataSource
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.TableDataSource.AbstractTableDataSource`1.GetItemKey(System.Object)">
            <summary>
            Get unique ID per given data such as DiagnosticUpdatedArgs or TodoUpdatedArgs.
            Data contains multiple items belong to one logical chunk. and the Id represents this particular 
            chunk of the data
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.TableDataSource.AbstractTableDataSource`1.CreateTableEntriesSource(System.Object)">
            <summary>
            Create TableEntriesSource for the given data.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.TableDataSource.AbstractTableDataSource`1.GetOrUpdateAggregationKey(System.Object)">
            <summary>
            Get unique ID for given data that will be used to find data whose items needed to be merged together.
            
            for example, for linked files, data that belong to same physical file will be gathered and items that belong to
            those data will be de-duplicated.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.TableDataSource.AbstractTableEntriesSnapshot`1">
            <summary>
            Base implementation of ITableEntriesSnapshot
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.TableDataSource.AbstractTableEntriesSource`1">
            <summary>
            Provide information to create a ITableEntriesSnapshot
            
            This works on data that belong to logically same source of items such as one particular analyzer or todo list analyzer.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.TableDataSource.MiscellaneousDiagnosticListTable.#ctor(Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.Diagnostics.IDiagnosticService,Microsoft.VisualStudio.Shell.TableManager.ITableManagerProvider)">
            this is for test only
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.TableDataSource.IVisualStudioDiagnosticListSuppressionStateService">
            <summary>
            Service to maintain information about the suppression state of specific set of items in the error list.
            </summary>
            <remarks>TODO: Move to the core platform layer.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.Implementation.TableDataSource.IVisualStudioDiagnosticListSuppressionStateService.CanSuppressSelectedEntries">
            <summary>
            Indicates if the top level "Suppress" menu should be visible for the current error list selection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.Implementation.TableDataSource.IVisualStudioDiagnosticListSuppressionStateService.CanSuppressSelectedEntriesInSource">
            <summary>
            Indicates if sub-menu "(Suppress) In Source" menu should be visible for the current error list selection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.Implementation.TableDataSource.IVisualStudioDiagnosticListSuppressionStateService.CanSuppressSelectedEntriesInSuppressionFiles">
            <summary>
            Indicates if sub-menu "(Suppress) In Suppression File" menu should be visible for the current error list selection.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.Implementation.TableDataSource.IVisualStudioDiagnosticListSuppressionStateService.CanRemoveSuppressionsSelectedEntries">
            <summary>
            Indicates if the top level "Remove Suppression(s)" menu should be visible for the current error list selection.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.TableDataSource.SuppressionStateColumnDefinition">
            <summary>
            Error list column for Suppression state of a diagnostic.
            </summary>
            <remarks>
            TODO: Move this column down to the shell as it is shared by multiple issue sources (Roslyn and FxCop).
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.TableDataSource.VisualStudioDiagnosticListSuppressionStateService">
            <summary>
            Service to maintain information about the suppression state of specific set of items in the error list.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.TableDataSource.VisualStudioDiagnosticListSuppressionStateService.ProcessSelectionChanged(Microsoft.VisualStudio.Shell.TableControl.TableSelectionChangedEventArgs)">
            <summary>
            Updates suppression state information when the selected entries change in the error list.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.TableDataSource.VisualStudioDiagnosticListSuppressionStateService.IsEntryWithConfigurableSuppressionState(Microsoft.CodeAnalysis.Diagnostics.DiagnosticData)">
            <summary>
            Returns true if an entry's suppression state can be modified.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.TableDataSource.VisualStudioDiagnosticListSuppressionStateService.GetSelectedItemsAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets <see cref="T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticData"/> objects for selected error list entries.
            For remove suppression, the method also returns selected external source diagnostics.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.TableDataSource.VisualStudioDiagnosticListTableCommandHandler.AddCommand(System.ComponentModel.Design.IMenuCommandService,System.Int32,System.EventHandler,System.EventHandler)">
            <summary>
            Add a command handler and status query handler for a menu item
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.TableDataSource.ValueTypeCache.GetOrCreate``1(``0)">
            <summary>
            Re-use already boxed object for value type.
            this cache never release cached object. must be used only with fixed set of value types. or
            something that grows very slowly like Guid for projects.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.TableDataSource.VisualStudioDiagnosticListTable.#ctor(Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.Diagnostics.IDiagnosticService,Microsoft.VisualStudio.Shell.TableManager.ITableManagerProvider)">
            this is for test only
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.TableDataSource.VisualStudioDiagnosticListTable.#ctor(Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.Diagnostics.IDiagnosticService,Microsoft.VisualStudio.LanguageServices.Implementation.TaskList.ExternalErrorDiagnosticUpdateSource,Microsoft.VisualStudio.Shell.TableManager.ITableManagerProvider)">
            this is for test only
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.Suppression.IVisualStudioSuppressionFixService">
            <summary>
            Service to allow adding or removing bulk suppressions (in source or suppressions file).
            </summary>
            <remarks>*** NOTE: These internal APIs are used in the VSO repo in Microsoft.VisualStudio.CodeAnalysis.MenuHandlers ***</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.Suppression.IVisualStudioSuppressionFixService.AddSuppressions(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Adds source suppressions for all the diagnostics in the error list, i.e. baseline all active issues.
            </summary>
            <param name="projectHierarchyOpt">An optional project hierarchy object in the solution explorer. If non-null, then only the diagnostics from the project will be suppressed.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.Suppression.IVisualStudioSuppressionFixService.AddSuppressions(System.Boolean,System.Boolean,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Adds source suppressions for diagnostics.
            </summary>
            <param name="selectedErrorListEntriesOnly">If true, then only the currently selected entries in the error list will be suppressed. Otherwise, all suppressable entries in the error list will be suppressed.</param>
            <param name="suppressInSource">If true, then suppressions will be generated inline in the source file. Otherwise, they will be generated in a separate global suppressions file.</param>
            <param name="projectHierarchyOpt">An optional project hierarchy object in the solution explorer. If non-null, then only the diagnostics from the project will be suppressed.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.Suppression.IVisualStudioSuppressionFixService.RemoveSuppressions(System.Boolean,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
            <summary>
            Removes source suppressions for suppressed diagnostics.
            </summary>
            <param name="selectedErrorListEntriesOnly">If true, then only the currently selected entries in the error list will be unsuppressed. Otherwise, all unsuppressable entries in the error list will be unsuppressed.</param>
            <param name="projectHierarchyOpt">An optional project hierarchy object in the solution explorer. If non-null, then only the diagnostics from the project will be unsuppressed.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.Suppression.VisualStudioSuppressionFixService">
            <summary>
            Service to compute and apply bulk suppression fixes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.TaskList.ExternalErrorDiagnosticUpdateSource.#ctor(Microsoft.CodeAnalysis.Workspace,Microsoft.CodeAnalysis.Diagnostics.IDiagnosticAnalyzerService,Microsoft.CodeAnalysis.Diagnostics.IDiagnosticUpdateSourceRegistrationService,Microsoft.CodeAnalysis.Shared.TestHooks.IAsynchronousOperationListener)">
            <summary>
            internal for testing
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.Utilities.AbstractNotifyPropertyChanged.SetProperty``1(``0@,``0,System.String)">
            <returns>True if the property was updated</returns>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.Implementation.Utilities.BrowserHelper.s_requestId">
            <summary>
            unique VS session id
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.Utilities.VisualStudioWaitContext.Callback">
            <summary>
            Note: this is a COM interface, however it is also free threaded.  This is necessary and
            by design so that we can hear about cancellation happening from the wait dialog (which
            will happen on the background).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.Implementation.Venus.AbstractContainedLanguage.SubjectBuffer">
            <summary>
            The subject (secondary) buffer that contains the C# or VB code.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.Implementation.Venus.AbstractContainedLanguage.DataBuffer">
            <summary>
            The underlying buffer that contains C# or VB code. NOTE: This is NOT the "document" buffer
            that is saved to disk.  Instead it is the view that the user sees.  The normal buffer graph
            in Venus includes 4 buffers:
            <code>
                       SurfaceBuffer/Databuffer (projection)
                        /                               |
            Subject Buffer (C#/VB projection)           |
                        |                               |
            Inert (generated) C#/VB Buffer         Document (aspx) buffer
            </code>
            In normal circumstance, the Subject and Inert C# buffer are identical in content, and the
            Surface and Document are also identical.  The Subject Buffer is the one that is part of the
            workspace, that most language operations deal with.  The surface buffer is the one that the
            view is created over, and the Document buffer is the one that is saved to disk.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.Venus.AbstractContainedLanguage.SetSubjectBuffer(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            To be called from the derived class constructor!
            </summary>
            <param name="subjectBuffer"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.Venus.AbstractContainedLanguage.SetDataBuffer(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            To be called from the derived class constructor!
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.Venus.CodeBlockEnumerator">
            <summary>
            An implementation of IVsEnumCodeBlocks used in the implementation of
            IVsContainedCode.EnumOriginalCodeBlocks for each language's Venus interop layer.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.Venus.CodeBlockEnumerator.#ctor(Microsoft.VisualStudio.LanguageServices.Implementation.Venus.CodeBlockEnumerator)">
            <summary>
            Clones another instance of a CodeBlockEnumerator.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.Venus.ContainedDocument">
            <summary>
            An IVisualStudioDocument which represents the secondary buffer to the workspace API.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.Venus.ContainedLanguage`2.EnumOriginalCodeBlocks(Microsoft.VisualStudio.TextManager.Interop.IVsEnumCodeBlocks@)">
            <summary>
            Returns the list of code blocks in the generated .cs file that comes from the ASP.NET
            markup compiler. These blocks of code are delimited by #line directives (ExternSource
            directives in VB). The TextSpan that we return is the span of the lines between the
            start #line and ending #line default directives (#End ExternSource in VB), and the
            cookie is the numeric line number given in the #line directive.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.Venus.ContainedLanguageCodeSupport.GetCompatibleEventHandlers(Microsoft.CodeAnalysis.Document,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Determine what methods of <paramref name=" className"/> could possibly be used as event
            handlers.
            </summary>
            <param name="document">The document containing <paramref name="className"/>.</param>
            <param name="className">The name of the type whose methods should be considered.</param>
            <param name="objectTypeName">The fully qualified name of the type containing a member
            that is an event. (E.g. "System.Web.Forms.Button")</param>
            <param name="nameOfEvent">The name of the member in <paramref name="objectTypeName"/>
            that is the event (E.g. "Clicked")</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>The display name of the method, and a unique to for the method.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.Venus.ContainedLanguageCodeSupport.EnsureEventHandler(Microsoft.CodeAnalysis.Document,Microsoft.CodeAnalysis.Document,System.String,System.String,System.String,System.String,System.String,System.UInt32,System.Boolean,Microsoft.CodeAnalysis.Formatting.Rules.IFormattingRule,System.Threading.CancellationToken)">
            <summary>
            Ensure that an event handler exists for a given event.
            </summary>
            <param name="thisDocument">The document corresponding to this operation.</param>
            <param name="targetDocument">The document to generate the event handler in if it doesn't
            exist.</param>
            <param name="className">The name of the type to generate the event handler in.</param>
            <param name="objectName">The name of the event member (if <paramref
            name="useHandlesClause"/> is true)</param>
            <param name="objectTypeName">The name of the type containing the event.</param>
            <param name="nameOfEvent">The name of the event member in <paramref
            name="objectTypeName"/></param>
            <param name="eventHandlerName">The name of the method to be hooked up to the
            event.</param>
            <param name="itemidInsertionPoint">The VS itemid of the file to generate the event
            handler in.</param>
            <param name="useHandlesClause">If true, a vb "Handles" clause will be generated for the
            handler.</param>
            <param name="additionalFormattingRule">An additional formatting rule that can be used to
            format the newly inserted method</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Either the unique id of the method if it already exists, or the unique id of
            the to be generated method, the text of the to be generated method, and the position in
            <paramref name="itemidInsertionPoint"/> where the text should be inserted.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.Venus.ContainedLanguageCodeSupport.GetMembers(Microsoft.CodeAnalysis.Document,System.String,Microsoft.VisualStudio.TextManager.Interop.CODEMEMBERTYPE,System.Threading.CancellationToken)">
            <summary>
            Get the display names and unique ids of all the members of the given type in <paramref
            name="className"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.Venus.ContainedLanguageCodeSupport.TryRenameElement(Microsoft.CodeAnalysis.Document,Microsoft.VisualStudio.TextManager.Interop.ContainedLanguageRenameType,System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Editor.IRefactorNotifyService},System.Threading.CancellationToken)">
            <summary>
            Try to do a symbolic rename the specified symbol.
            </summary>
            <returns>False ONLY if it can't resolve the name.  Other errors result in the normal
            exception being propagated.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.Venus.IVsContainedLanguageCodeSupport">
            <summary>
            This interface is redefined by copy/paste from Reflector, so that we can tweak the
            definitions of GetMembers and GetCompatibleEventMembers, because they take optional out
            params, and the marshalling was wrong in the PIA.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.Venus.IVsContainedLanguageStaticEventBinding">
            <summary>
            This interface is redefined by copy/paste from Reflector, so that we can tweak the
            definitions of GetStaticEventBindingsForObject, because they take optional out params, and
            the marshalling was wrong in the PIA.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.Venus.VenusTaskExtensions.WaitAndGetResult_Venus``1(System.Threading.Tasks.Task{``0},System.Threading.CancellationToken)">
            <summary>
            Does a <see cref="M:Roslyn.Utilities.TaskExtensions.WaitAndGetResult``1(System.Threading.Tasks.Task{``0},System.Threading.CancellationToken)"/> for Venus.
            </summary>
            <remarks>
            This function is the exact same as <see cref="M:Roslyn.Utilities.TaskExtensions.WaitAndGetResult``1(System.Threading.Tasks.Task{``0},System.Threading.CancellationToken)"/>, except it opts out
            of enforcement that it can be called on non-UI threads. Venus, since it must implement a highly blocking API,
            has no choice but to use WaitAndGetResult in a bunch of places. But that's not a good reason to require the tests
            to have thread affinity, since the tests have no specific threading requirements. Thus, it's acceptable for Venus
            to call the _CanCallOnBackground variant. We hope to audit _CanCallOnBackground periodically, and so rather than
            having to understand that each of those uses are Venus and thus get a special pass.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.DetailedErrorInfoDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.GlobalUndoServiceFactory">
            <summary>
            A service that provide a way to undo operations applied to the workspace
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.GlobalUndoServiceFactory.NoOpUndoPrimitive">
            <summary>
            no op undo primitive
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.VisualStudioDocumentNavigationService.GetPositionWithinDocumentBounds(System.Int32,System.Int32)">
            <summary>
            It is unclear why, but we are sometimes asked to navigate to a position that is not
            inside the bounds of the associated <see cref="T:Microsoft.CodeAnalysis.Document"/>. This method returns a
            position that is guaranteed to be inside the <see cref="T:Microsoft.CodeAnalysis.Document"/> bounds. If the
            returned position is different from the given position, then the worst observable
            behavior is either no navigation or navigation to the end of the document. See the
            following bugs for more details:
                https://devdiv.visualstudio.com/DevDiv/_workitems?id=112211
                https://devdiv.visualstudio.com/DevDiv/_workitems?id=136895
                https://devdiv.visualstudio.com/DevDiv/_workitems?id=224318
                https://devdiv.visualstudio.com/DevDiv/_workitems?id=235409
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.VisualStudioDocumentNavigationService.GetSpanWithinDocumentBounds(Microsoft.CodeAnalysis.Text.TextSpan,System.Int32)">
            <summary>
            It is unclear why, but we are sometimes asked to navigate to a <see cref="T:Microsoft.CodeAnalysis.Text.TextSpan"/>
            that is not inside the bounds of the associated <see cref="T:Microsoft.CodeAnalysis.Document"/>. This method
            returns a span that is guaranteed to be inside the <see cref="T:Microsoft.CodeAnalysis.Document"/> bounds. If
            the returned span is different from the given span, then the worst observable behavior
            is either no navigation or navigation to the end of the document.
            See https://github.com/dotnet/roslyn/issues/7660 for more details.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.VisualStudioDocumentTrackingService.GetActiveDocument">
            <summary>
            Get the <see cref="T:Microsoft.CodeAnalysis.DocumentId"/> of the active document. May be called from any thread.
            May return null if there is no active document or the active document is not part of this
            workspace.
            </summary>
            <returns>The ID of the active document (if any)</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.VisualStudioDocumentTrackingService.GetVisibleDocuments">
            <summary>
            Get a read only collection of the <see cref="T:Microsoft.CodeAnalysis.DocumentId"/>s of all the visible documents in the workspace.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Implementation.VisualStudioDocumentTrackingService.DocumentFrameShowing(Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame,Microsoft.CodeAnalysis.DocumentId,System.Boolean)">
            <summary>
            Called via the DocumentProvider's RDT OnBeforeDocumentWindowShow notification when a workspace document is being shown.
            </summary>
            <param name="frame">The frame containing the document being shown.</param>
            <param name="id">The <see cref="T:Microsoft.CodeAnalysis.DocumentId"/> of the document being shown.</param>
            <param name="firstShow">Indicates whether this is a first or subsequent show.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Implementation.VisualStudioDocumentTrackingService.FrameListener">
            <summary>
            Listens to frame notifications for a visible frame. When the frame becomes invisible or closes,
            then it automatically disconnects.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.EditAndContinue.DebuggeeModuleMetadataProvider.DebuggerService">
            <summary>
            Concord component. Singleton created on demand during debugging session and discarded as soon as the session ends.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.EditAndContinue.DebuggeeModuleMetadataProvider.DebuggerService.ComponentId">
            <summary>
            Component id as specified in ManagedEditAndContinueService.vsdconfigxml.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.EditAndContinue.DebuggeeModuleMetadataProvider.DebuggerService.MessageSourceId">
            <summary>
            Message source id as specified in ManagedEditAndContinueService.vsdconfigxml.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.EditAndContinue.DebuggeeModuleMetadataProvider.TryGetBaselineMetadata(System.Guid)">
            <summary>
            Finds a module of given MVID in one of the processes being debugged and returns its baseline metadata.
            Shall only be called while in debug mode.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.FindUsages.StreamingFindUsagesPresenter.AbstractTableDataSourceFindUsagesContext._cleared">
            <summary>
            If we've been cleared or not.  If we're cleared we'll just return an empty
            list of results whenever queried for the current snapshot.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.FindUsages.StreamingFindUsagesPresenter.AbstractTableDataSourceFindUsagesContext.Definitions">
            <summary>
            The list of all definitions we've heard about.  This may be a superset of the
            keys in <see cref="F:Microsoft.VisualStudio.LanguageServices.FindUsages.StreamingFindUsagesPresenter.AbstractTableDataSourceFindUsagesContext._definitionToBucket"/> because we may encounter definitions
            we don't create definition buckets for.  For example, if the definition asks
            us to not display it if it has no references, and we don't run into any 
            references for it (common with implicitly declared symbols).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.FindUsages.StreamingFindUsagesPresenter.AbstractTableDataSourceFindUsagesContext._definitionToBucket">
            <summary>
            We will hear about the same definition over and over again.  i.e. for each reference 
            to a definition, we will be told about the same definition.  However, we only want to
            create a single actual <see cref="T:Microsoft.VisualStudio.Shell.FindAllReferences.DefinitionBucket"/> for the definition. To accomplish
            this we keep a map from the definition to the task that we're using to create the 
            bucket for it.  The first time we hear about a definition we'll make a single task
            and then always return that for all future references found.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.FindUsages.StreamingFindUsagesPresenter.AbstractTableDataSourceFindUsagesContext._currentlyGroupingByDefinition">
            <summary>
            We want to hide declarations of a symbol if the user is grouping by definition.
            With such grouping on, having both the definition group and the declaration item
            is just redundant.  To make life easier we keep around two groups of entries.
            One group for when we are grouping by definition, and one when we're not.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.FindUsages.StreamingFindUsagesPresenter.WithoutReferencesFindUsagesContext">
            <summary>
            Context to be used for FindImplementations/GoToDef (as opposed to FindReferences).
            This context will not group entries by definition, and will instead just create
            entries for the definitions themselves.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.FindUsages.StreamingFindUsagesPresenter.WithReferencesFindUsagesContext">
            <summary>
            Context to be used for FindAllReferences (as opposed to FindImplementations/GoToDef).
            This context supports showing reference items, and will display appropriate messages
            about no-references being found for a definition at the end of the search.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.FindUsages.StreamingFindUsagesPresenter.AbstractDocumentSpanEntry">
            <summary>
            Base type of all <see cref="T:Microsoft.VisualStudio.LanguageServices.FindUsages.StreamingFindUsagesPresenter.Entry"/>s that represent some source location in 
            a <see cref="P:Microsoft.VisualStudio.LanguageServices.FindUsages.StreamingFindUsagesPresenter.AbstractDocumentSpanEntry.Document"/>.  Navigation to that location is provided by this type.
            Subclasses can be used to provide customized line text to display in the entry.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.FindUsages.StreamingFindUsagesPresenter.DefinitionItemEntry">
            <summary>
            Shows a DefinitionItem as a Row in the FindReferencesWindow.  Only used for
            GoToDefinition/FindImplementations.  In these operations, we don't want to 
            create a DefinitionBucket.  So we instead just so the symbol as a normal row.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.FindUsages.StreamingFindUsagesPresenter.DocumentSpanEntry">
            <summary>
            Entry to show for a particular source location.  The row will show the classified
            contents of that line, and hovering will reveal a tooltip showing that line along
            with a few lines above/below it.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.FindUsages.StreamingFindUsagesPresenter.Entry">
            <summary>
            Represents a single entry (i.e. row) in the ungrouped FAR table.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.FindUsages.StreamingFindUsagesPresenter.LazyToolTip">
            <summary>
            Class which allows us to provide a delay-created tooltip for our reference entries.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.FindUsages.FindUsagesTableControlEventProcessorProvider">
            <summary>
            Event processor that we export so we can control how navigation works in the streaming
            FAR window.  We need this because the FAR window has no way to know how to do things like
            navigate to definitions that are from metadata.  We take control here and handle navigation
            ourselves so that we can do things like navigate to MetadataAsSource.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.FindUsages.FindUsagesOptions.DefinitionGroupingPriority">
            <summary>
            Used to store the user's explicit 'grouping priority' for the 'Definition' column.
            We store this because we'll disable this grouping sometimes (i.e. for GoToImplementation),
            and we want to restore the value back to its original state when the user does the
            next FindReferences call.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.ProjectSystem.ICodeModelFactory">
            <summary>
            Provides file/project code model for a given project context.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.ProjectSystem.IWorkspaceProjectContext">
            <summary>
            Project context to initialize properties and items of a Workspace project created with <see cref="M:Microsoft.VisualStudio.LanguageServices.ProjectSystem.IWorkspaceProjectContextFactory.CreateProjectContext(System.String,System.String,System.String,System.Guid,System.Object,System.String)"/>. 
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.ProjectSystem.IWorkspaceProjectContextFactory">
            <summary>
            Factory to create a project context for a new Workspace project that can be initialized on a background thread.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.ProjectSystem.IWorkspaceProjectContextFactory.CreateProjectContext(System.String,System.String,System.String,System.Guid,System.Object,System.String)">
            <summary>
            Creates and initializes a new Workspace project and returns a <see cref="T:Microsoft.VisualStudio.LanguageServices.ProjectSystem.IWorkspaceProjectContext"/> to lazily initialize the properties and items for the project.
            This method can be invoked on a background thread and doesn't access any members of the given UI <paramref name="hierarchy"/>,
            allowing the UI hierarchy to be published lazily, as long as <see cref="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.GetProjectTrackerAndInitializeIfNecessary(System.IServiceProvider)"/> has been called once.
            </summary>
            <param name="languageName">Project language.</param>
            <param name="projectDisplayName">Display name for the project.</param>
            <param name="projectFilePath">Full path to the project file for the project.</param>
            <param name="projectGuid">Project guid.</param>
            <param name="hierarchy"><see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy"/> for the project, an be null in deferred project load cases.</param>
            <param name="binOutputPath">Initial project binary output path.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.ProjectSystem.IWorkspaceProjectContextFactory.CreateProjectContext(System.String,System.String,System.String,System.Guid,System.Object,System.String,Microsoft.VisualStudio.LanguageServices.Implementation.TaskList.ProjectExternalErrorReporter)">
            <summary>
            Creates and initializes a new Workspace project and returns a <see cref="T:Microsoft.VisualStudio.LanguageServices.ProjectSystem.IWorkspaceProjectContext"/> to lazily initialize the properties and items for the project.
            This method can be invoked on a background thread and doesn't access any members of the given UI <paramref name="hierarchy"/>,
            allowing the UI hierarchy to be published lazily, as long as <see cref="M:Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.GetProjectTrackerAndInitializeIfNecessary(System.IServiceProvider)"/> has been called once.
            </summary>
            <param name="languageName">Project language.</param>
            <param name="projectDisplayName">Display name for the project.</param>
            <param name="projectFilePath">Full path to the project file for the project.</param>
            <param name="projectGuid">Project guid.</param>
            <param name="hierarchy"><see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy"/> for the project, an be null in deferred project load cases.</param>
            <param name="binOutputPath">Initial project binary output path.</param>
            <param name="errorReporter">Error reporter object.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.VisualStudioWorkspace">
            <summary>
            A Workspace specific to Visual Studio.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.VisualStudioWorkspace.GetHierarchy(Microsoft.CodeAnalysis.ProjectId)">
            <summary>
            Returns the hierarchy for a given project. 
            </summary>
            <param name="projectId">The <see cref="T:Microsoft.CodeAnalysis.ProjectId"/> for the project.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy"/>, or null if the project doesn't have one.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.VisualStudioWorkspace.OpenInvisibleEditor(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            Given a document id, opens an invisible editor for the document.
            </summary>
            <returns>A unique instance of IInvisibleEditor that must be disposed by the caller.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.VisualStudioWorkspace.GetFileCodeModel(Microsoft.CodeAnalysis.DocumentId)">
            <summary>
            Returns the <see cref="T:EnvDTE.FileCodeModel"/> for a given document.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.VisualStudioWorkspace.CreatePortableExecutableReference(System.String,Microsoft.CodeAnalysis.MetadataReferenceProperties)">
            <summary>
            Creates a <see cref="T:Microsoft.CodeAnalysis.PortableExecutableReference" /> that correctly retrieves the Visual Studio context,
            such as documentation comments in the correct language.
            </summary>
            <param name="filePath">The file path of the assembly or module.</param>
            <param name="properties">The properties for the reference.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Remote.JsonRpcEx">
            <summary>
            Helper type that abstract out JsonRpc communication with extra capability of
            using raw stream to move over big chunk of data
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Remote.JsonRpcEx.ThrowOwnCancellationToken">
            <summary>
            Show info bar and throw its own cancellation exception until 
            we figure out this issue.
            https://devdiv.visualstudio.com/DevDiv/_workitems/edit/453544
            
            the issue is basically we are getting unexpected exception from InvokeAsync
            and we don't know exactly why that is happening.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Remote.JsonRpcConnection.ServiceJsonRpcEx">
            <summary>
            Communication channel between VS feature and roslyn service in remote host.
            
            this is the channel consumer of remote host client will playing with
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Remote.RemotableDataJsonRpc">
            <summary>
            Communication channel between remote host client and remote host.
            
            this is framework's back channel to talk to remote host
            
            for example, this will be used to deliver missing remotable data to remote host.
            
            all connection will share one remotable data channel
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Remote.RemotableDataJsonRpc.RequestAssetAsync(System.Int32,Microsoft.CodeAnalysis.Checksum[],System.String,System.Threading.CancellationToken)">
            <summary>
            this is callback from remote host side to get asset associated with checksum from VS.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.Remote.RemoteHostClientServiceFactory.RemoteHostClientService.s_lastRemoteClientTask">
            <summary>
            this hold onto last remoteHostClient to make debugging easier
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.Remote.ServiceHubRemoteHostClient._globalNotificationsGate">
            <summary>
            Lock for the <see cref="F:Microsoft.VisualStudio.LanguageServices.Remote.ServiceHubRemoteHostClient._globalNotificationsTask"/> task chain.  Each time we hear 
            about a global operation starting or stopping (i.e. a build) we will '.ContinueWith'
            this task chain with a new notification to the OOP side.  This way all the messages
            are properly serialized and appera in the right order (i.e. we don't hear about a 
            stop prior to hearing about the relevant start).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Remote.ServiceHubRemoteHostClient.RetryRemoteCallAsync``2(System.Func{System.Threading.Tasks.Task{``1}},System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            call <paramref name="funcAsync"/> and retry up to <paramref name="timeout"/> if the call throws
            <typeparamref name="TException"/>. any other exception from the call won't be handled here.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.LanguageServices.Remote.ServiceHubRemoteHostClient.WorkspaceHost._session">
            <summary>
            The current session we have open to the remote host.  Only accessible from the
            UI thread.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.RQName">
            <summary>
            Helpers related to <see cref="T:Microsoft.VisualStudio.LanguageServices.RQName"/>s. The resulting strings are suitable to pass as the pszRQName
            arguments to methods in <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsRefactorNotify"/> and <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSymbolicNavigationNotify"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.RQName.From(Microsoft.CodeAnalysis.ISymbol)">
            <summary>
            Returns an RQName for the given symbol, or <code>null</code>if the symbol cannot be represented by an RQName.
            </summary>
            <param name="symbol">The symbol to build an RQName for.</param>
            <returns>A string suitable to pass as the pszRQName argument to methods in <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsRefactorNotify"/>
            and <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSymbolicNavigationNotify"/>.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.SymbolSearch.AbstractDelayStartedService">
            <summary>
            Base type for services that we want to delay running until certain criteria is met.
            For example, we don't want to run the <see cref="T:Microsoft.VisualStudio.LanguageServices.SymbolSearch.VisualStudioSymbolSearchService"/> core codepath
            if the user has not enabled the features that need it.  That helps us avoid loading
            dlls unnecessarily and bloating the VS memory space.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.SymbolSearch.VisualStudioSymbolSearchService">
            <summary>
            A service which enables searching for packages matching certain criteria.
            It works against an <see cref="N:Microsoft.CodeAnalysis.Elfie"/> database to find results.
            
            This implementation also spawns a task which will attempt to keep that database up to
            date by downloading patches on a daily basis.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.VirtualMemoryNotificationListener">
            <summary>
            Listens to broadcast notifications from the Visual Studio Shell indicating that the application is running
            low on available virtual memory.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.VirtualMemoryNotificationListener.OnBroadcastMessage(System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            Called by the Visual Studio Shell to notify components of a broadcast message.
            </summary>
            <param name="msg">The message identifier.</param>
            <param name="wParam">First parameter associated with the message.</param>
            <param name="lParam">Second parameter associated with the message.</param>
            <returns>S_OK always.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.WorkspaceCacheService.FlushCaches">
            <summary>
            Called by the host to try and reduce memory occupied by caches.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.LanguageServices.WorkspaceCacheService.CacheFlushRequested">
            <summary>
            Raised by the host when available memory is getting low in order to request that caches be flushed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Packaging.IPackageServicesProxy">
            <summary>Wrapper type to ensure we delay load the nuget libraries.</summary> 
            <remarks>All methods may throw exceptions due to <see cref="T:NuGet.VisualStudio.IVsPackageSourceProvider"/>
            throwing in all sorts of bad nuget states (for example a bad nuget.config file)</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.LanguageServices.Packaging.IPackageServicesProxy.GetSources(System.Boolean,System.Boolean)">
            <summary>
            This method just forwards along <see cref="M:NuGet.VisualStudio.IVsPackageSourceProvider.GetSources(System.Boolean,System.Boolean)"/>
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Packaging.PackageInstallerService">
            <summary>
            Free threaded wrapper around the NuGet.VisualStudio STA package installer interfaces.
            We want to be able to make queries about packages from any thread.  For example, the
            add-NuGet-reference feature wants to know what packages a project already has 
            references to.  NuGet.VisualStudio provides this information, but only in a COM STA 
            manner.  As we don't want our background work to bounce and block on the UI thread 
            we have this helper class which queries the information on the UI thread and caches
            the data so it can be read from the background.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.Progression.GraphNodeCreation">
            <summary>
            A helper class that implements the creation of <see cref="T:Microsoft.VisualStudio.GraphModel.GraphNode"/>s.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.ServicesVSResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources._0_encountered_an_error_and_has_been_disabled">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; encountered an error and has been disabled..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources._0_references">
            <summary>
              Looks up a localized string similar to {0} references.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources._0_Use_the_dropdown_to_view_and_navigate_to_other_items_in_this_file">
             <summary>
               Looks up a localized string similar to {0}
            
            Use the dropdown to view and navigate to other items in this file..
             </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources._1_reference">
            <summary>
              Looks up a localized string similar to 1 reference.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Access_colon">
            <summary>
              Looks up a localized string similar to _Access:.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Accessibilities_can_match_any">
            <summary>
              Looks up a localized string similar to Accessibilities (can match any).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Active">
            <summary>
              Looks up a localized string similar to Active.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Add_a_naming_rule">
            <summary>
              Looks up a localized string similar to Add a naming rule.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Add_a_reference_to_0">
            <summary>
              Looks up a localized string similar to Add a reference to &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Add_a_symbol_specification">
            <summary>
              Looks up a localized string similar to Add a symbol specification.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Add_item">
            <summary>
              Looks up a localized string similar to Add item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Add_to_existing_file">
            <summary>
              Looks up a localized string similar to Add to _existing file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Additional_information_colon">
            <summary>
              Looks up a localized string similar to Additional information:.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.all_lower">
            <summary>
              Looks up a localized string similar to all lower.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.ALL_UPPER">
            <summary>
              Looks up a localized string similar to ALL UPPER.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Analysis">
            <summary>
              Looks up a localized string similar to Analysis.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Analyzer_assemblies_0_and_1_both_have_identity_2_but_different_contents_Only_one_will_be_loaded_and_analyzers_using_these_assemblies_may_not_run_correctly">
            <summary>
              Looks up a localized string similar to Analyzer assemblies &apos;{0}&apos; and &apos;{1}&apos; both have identity &apos;{2}&apos; but different contents. Only one will be loaded and analyzers using these assemblies may not run correctly..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Analyzer_assembly_0_depends_on_1_but_it_was_not_found_Analyzers_may_not_run_correctly_unless_the_missing_assembly_is_added_as_an_analyzer_reference_as_well">
            <summary>
              Looks up a localized string similar to Analyzer assembly &apos;{0}&apos; depends on &apos;{1}&apos; but it was not found. Analyzers may not run correctly unless the missing assembly is added as an analyzer reference as well..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Analyzer_reference_to_0_in_project_1">
            <summary>
              Looks up a localized string similar to Analyzer reference to &apos;{0}&apos; in project &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.AnalyzerChangedOnDisk">
            <summary>
              Looks up a localized string similar to AnalyzerChangedOnDisk.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.AnalyzerDependencyConflict">
            <summary>
              Looks up a localized string similar to AnalyzerDependencyConflict.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Applying_remove_suppressions_fix">
            <summary>
              Looks up a localized string similar to Applying remove suppressions fix....
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Applying_suppressions_fix">
            <summary>
              Looks up a localized string similar to Applying suppressions fix....
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Assembly">
            <summary>
              Looks up a localized string similar to Assembly .
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.at_the_end">
            <summary>
              Looks up a localized string similar to at the end.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Base_Types">
            <summary>
              Looks up a localized string similar to Base Types.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Block_Structure_Guides">
            <summary>
              Looks up a localized string similar to Block Structure Guides.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.bracket_bracket">
            <summary>
              Looks up a localized string similar to [-] .
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.bracket_plus_bracket">
            <summary>
              Looks up a localized string similar to [+] .
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.built_in_types">
            <summary>
              Looks up a localized string similar to built-in types.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.camel_Case_Name">
            <summary>
              Looks up a localized string similar to camel Case Name.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Can_t_create_a_node_id_for_this_symbol_kind_colon_0">
            <summary>
              Looks up a localized string similar to Can&apos;t create a node id for this symbol kind: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Can_t_find_where_to_insert_member">
            <summary>
              Looks up a localized string similar to Can&apos;t find where to insert member.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Can_t_rename_other_elements">
            <summary>
              Looks up a localized string similar to Can&apos;t rename &apos;other&apos; elements.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Cancel">
            <summary>
              Looks up a localized string similar to Cancel.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.CantApplyChangesModuleHasBeenUnloaded">
            <summary>
              Looks up a localized string similar to Can&apos;t apply changes -- module &apos;{0}&apos; has been unloaded..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Capitalization_colon">
            <summary>
              Looks up a localized string similar to Capitalization:.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Change_Signature">
            <summary>
              Looks up a localized string similar to Change Signature.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.ChangesNotAllowedIFAssemblyHasNotBeenLoaded">
            <summary>
              Looks up a localized string similar to Changes are not allowed if the assembly has not been loaded..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.ChangesNotAllowedIfProjectWasntBuildWhenDebuggingStarted">
            <summary>
              Looks up a localized string similar to Changes are not allowed if the project wasn&apos;t built when debugging started..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.ChangesNotAllowedIfProjectWasntLoadedWhileDebugging">
             <summary>
               Looks up a localized string similar to Changes are not allowed if the project wasn&apos;t loaded and built when debugging started.
            
            &apos;Lightweight solution load&apos; is enabled for the current solution. Disable it to ensure that all projects are loaded when debugging starts..
             </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.ChangesNotAllowedWhileCodeIsRunning">
            <summary>
              Looks up a localized string similar to Changes are not allowed while code is running..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Choose_a_Symbol_Specification_and_a_Naming_Style">
            <summary>
              Looks up a localized string similar to Choose a Symbol Specification and a Naming Style..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Close">
            <summary>
              Looks up a localized string similar to Close.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Code_block_preferences_colon">
            <summary>
              Looks up a localized string similar to Code block preferences:.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Collapse_regions_when_collapsing_to_definitions">
            <summary>
              Looks up a localized string similar to Collapse #regions when collapsing to definitions.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Computing_remove_suppressions_fix">
            <summary>
              Looks up a localized string similar to Computing remove suppressions fix....
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Computing_suppressions_fix">
            <summary>
              Looks up a localized string similar to Computing suppressions fix....
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Copy_to_Clipboard">
            <summary>
              Looks up a localized string similar to Copy to Clipboard.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Could_not_find_location_of_folder_on_disk">
            <summary>
              Looks up a localized string similar to Could not find location of folder on disk.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Could_not_find_project_0">
            <summary>
              Looks up a localized string similar to Could not find project &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Create_new_file">
            <summary>
              Looks up a localized string similar to _Create new file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.CSharp_VB_Build_Table_Data_Source">
            <summary>
              Looks up a localized string similar to C#/VB Build Table Data Source.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.CSharp_VB_Diagnostics_Table_Data_Source">
            <summary>
              Looks up a localized string similar to C#/VB Diagnostics Table Data Source.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.CSharp_VB_Todo_List_Table_Data_Source">
            <summary>
              Looks up a localized string similar to C#/VB Todo List Table Data Source.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Current_block">
            <summary>
              Looks up a localized string similar to Current block.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Debugger">
            <summary>
              Looks up a localized string similar to Debugger.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Default_">
            <summary>
              Looks up a localized string similar to Default.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Description">
            <summary>
              Looks up a localized string similar to Description.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Deselect_All">
            <summary>
              Looks up a localized string similar to _Deselect All.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Determining_autos">
            <summary>
              Looks up a localized string similar to Determining autos....
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Determining_breakpoint_location">
            <summary>
              Looks up a localized string similar to Determining breakpoint location....
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Determining_current_block">
            <summary>
              Looks up a localized string similar to Determining current block..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.DocumentPath_is_illegal">
            <summary>
              Looks up a localized string similar to DocumentPath is illegal.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Edit_item">
            <summary>
              Looks up a localized string similar to Edit item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Element_is_not_valid">
            <summary>
              Looks up a localized string similar to Element is not valid..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Enable">
            <summary>
              Looks up a localized string similar to Enable.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Enable_and_ignore_future_errors">
            <summary>
              Looks up a localized string similar to Enable and ignore future errors.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Enable_full_solution_analysis">
            <summary>
              Looks up a localized string similar to Enable full solution _analysis.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.End_of_inner_exception_stack">
            <summary>
              Looks up a localized string similar to --- End of inner exception stack trace ---.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.End_position_must_be_start_position">
            <summary>
              Looks up a localized string similar to End position must be &gt;= start position.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Enter_a_title_for_this_Naming_Rule">
            <summary>
              Looks up a localized string similar to Enter a title for this Naming Rule..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Enter_a_title_for_this_Naming_Style">
            <summary>
              Looks up a localized string similar to Enter a title for this Naming Style..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Enter_a_title_for_this_Symbol_Specification">
            <summary>
              Looks up a localized string similar to Enter a title for this Symbol Specification..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Error_encountered_while_loading_the_project_Some_project_features_such_as_full_solution_analysis_for_the_failed_project_and_projects_that_depend_on_it_have_been_disabled">
            <summary>
              Looks up a localized string similar to Error encountered while loading the project. Some project features, such as full solution analysis for the failed project and projects that depend on it, have been disabled..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Error_reading_ruleset_file_0_1">
            <summary>
              Looks up a localized string similar to Error reading ruleset file {0} - {1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Error_while_reading_0_colon_1">
            <summary>
              Looks up a localized string similar to Error while reading &apos;{0}&apos;: {1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.ErrorReadingFile">
            <summary>
              Looks up a localized string similar to Error while reading a file.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.ErrorReadingRuleset">
            <summary>
              Looks up a localized string similar to ErrorReadingRuleset.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Event_type_is_invalid">
            <summary>
              Looks up a localized string similar to Event type is invalid.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.everywhere_else">
            <summary>
              Looks up a localized string similar to everywhere else.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.example">
            <summary>
              Looks up a localized string similar to example.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Exceptions_colon">
            <summary>
              Looks up a localized string similar to Exceptions:.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Expression_preferences_colon">
            <summary>
              Looks up a localized string similar to Expression preferences:.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.External_reference_found">
            <summary>
              Looks up a localized string similar to External reference found.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Extract_Interface">
            <summary>
              Looks up a localized string similar to Extract Interface.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Fade_out_unreachable_code">
            <summary>
              Looks up a localized string similar to Fade out unreachable code.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Fading">
            <summary>
              Looks up a localized string similar to Fading.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Failed_to_create_document_in_miscellaneous_files_project">
            <summary>
              Looks up a localized string similar to Failed to create document in miscellaneous files project..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.File_already_exists">
            <summary>
              Looks up a localized string similar to File already exists.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.File_Name_colon">
            <summary>
              Looks up a localized string similar to File Name:.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.File_name_must_have_the_0_extension">
            <summary>
              Looks up a localized string similar to File name must have the &quot;{0}&quot; extension..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.File_path_cannot_use_reserved_keywords">
            <summary>
              Looks up a localized string similar to File path cannot use reserved keywords.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.First_word_upper">
            <summary>
              Looks up a localized string similar to First word upper.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.For_a_given_symbol_only_the_topmost_rule_with_a_matching_Specification_will_be_applied_Violation_of_that_rules_Required_Style_will_be_reported_at_the_chosen_Severity_level">
            <summary>
              Looks up a localized string similar to For a given symbol, only the topmost rule with a matching &apos;Specification&apos; will be applied. Violation of that rule&apos;s &apos;Required Style&apos; will be reported at the chosen &apos;Severity&apos; level..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.For_locals_parameters_and_members">
            <summary>
              Looks up a localized string similar to For locals, parameters and members.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.For_member_access_expressions">
            <summary>
              Looks up a localized string similar to For member access expressions.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Generate_Type">
            <summary>
              Looks up a localized string similar to Generate Type.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Generated_name_colon">
            <summary>
              Looks up a localized string similar to Generated name:.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Get_help_for_0">
            <summary>
              Looks up a localized string similar to Get help for &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Get_help_for_0_from_Bing">
            <summary>
              Looks up a localized string similar to Get help for &apos;{0}&apos; from Bing.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Getting_DataTip_text">
            <summary>
              Looks up a localized string similar to Getting DataTip text....
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.given_workspace_doesn_t_support_undo">
            <summary>
              Looks up a localized string similar to given workspace doesn&apos;t support undo.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.identifier">
            <summary>
              Looks up a localized string similar to identifier.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.IDs_are_not_supported_for_this_symbol_type">
            <summary>
              Looks up a localized string similar to IDs are not supported for this symbol type..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Illegal_characters_in_path">
            <summary>
              Looks up a localized string similar to Illegal characters in path..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Implement_Interface_or_Abstract_Class">
            <summary>
              Looks up a localized string similar to Implement Interface or Abstract Class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Implemented_By">
            <summary>
              Looks up a localized string similar to Implemented By.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Implements_">
            <summary>
              Looks up a localized string similar to Implements.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Inherited_By">
            <summary>
              Looks up a localized string similar to Inherited By.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Inherits_">
            <summary>
              Looks up a localized string similar to Inherits.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Install_0">
            <summary>
              Looks up a localized string similar to Install &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Installing_0">
            <summary>
              Looks up a localized string similar to Installing &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Installing_0_completed">
            <summary>
              Looks up a localized string similar to Installing &apos;{0}&apos; completed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Installing_0_failed_Additional_information_colon_1">
             <summary>
               Looks up a localized string similar to Installing &apos;{0}&apos; failed.
            
            Additional information: {1}.
             </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.IntelliSense">
            <summary>
              Looks up a localized string similar to IntelliSense.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Interface_name_conflicts_with_an_existing_type_name">
            <summary>
              Looks up a localized string similar to Interface name conflicts with an existing type name..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Interface_name_is_not_a_valid_0_identifier">
            <summary>
              Looks up a localized string similar to Interface name is not a valid {0} identifier..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Invalid_access">
            <summary>
              Looks up a localized string similar to Invalid access..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Kind_colon">
            <summary>
              Looks up a localized string similar to _Kind:.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Learn_more">
            <summary>
              Looks up a localized string similar to Learn more.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Location_colon">
            <summary>
              Looks up a localized string similar to Location:.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Manage_specifications">
            <summary>
              Looks up a localized string similar to Manage specifications.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Manage_styles">
            <summary>
              Looks up a localized string similar to Manage styles.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Maximum_number_of_documents_are_open">
            <summary>
              Looks up a localized string similar to Maximum number of documents are open..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Member_of_0">
            <summary>
              Looks up a localized string similar to Member of {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Miscellaneous_Files">
            <summary>
              Looks up a localized string similar to Miscellaneous Files.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.MissingAnalyzerReference">
            <summary>
              Looks up a localized string similar to MissingAnalyzerReference.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Modifier">
            <summary>
              Looks up a localized string similar to Modifier.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Modifiers_must_match_all">
            <summary>
              Looks up a localized string similar to Modifiers (must match all).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.ModuleHasBeenUnloaded">
            <summary>
              Looks up a localized string similar to Module has been unloaded..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.More_about_0">
            <summary>
              Looks up a localized string similar to More about {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Move_0_above_1">
            <summary>
              Looks up a localized string similar to Move {0} above {1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Move_0_below_1">
            <summary>
              Looks up a localized string similar to Move {0} below {1}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Move_down">
            <summary>
              Looks up a localized string similar to Move down.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Move_up">
            <summary>
              Looks up a localized string similar to Move up.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Name_colon1">
            <summary>
              Looks up a localized string similar to Name:.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Name_colon2">
            <summary>
              Looks up a localized string similar to Name:.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Naming_Rule">
            <summary>
              Looks up a localized string similar to Naming Rule.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Naming_Rules_allow_you_to_define_how_particular_sets_of_symbols_should_be_named_and_how_incorrectly_named_symbols_should_be_handled">
            <summary>
              Looks up a localized string similar to Naming Rules allow you to define how particular sets of symbols should be named and how incorrectly-named symbols should be handled..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Naming_Style">
            <summary>
              Looks up a localized string similar to Naming Style.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Naming_Style_colon">
            <summary>
              Looks up a localized string similar to Naming Style:.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Naming_Style_Title_colon">
            <summary>
              Looks up a localized string similar to Naming Style Title:.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Navigation_must_be_performed_on_the_foreground_thread">
            <summary>
              Looks up a localized string similar to Navigation must be performed on the foreground thread..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Never_show_this_again">
            <summary>
              Looks up a localized string similar to Never show this again.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.New_file_name_colon">
            <summary>
              Looks up a localized string similar to New _file name:.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.New_interface_name_colon">
            <summary>
              Looks up a localized string similar to New _interface name:.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.No">
            <summary>
              Looks up a localized string similar to No.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.No_Changes">
            <summary>
              Looks up a localized string similar to No Changes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.No_references_found_to_0">
            <summary>
              Looks up a localized string similar to No references found to &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Not_a_valid_value">
            <summary>
              Looks up a localized string similar to Not a valid value.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.NotApplicable">
            <summary>
              Looks up a localized string similar to N/A.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.OK">
            <summary>
              Looks up a localized string similar to OK.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Options">
            <summary>
              Looks up a localized string similar to Options.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.or">
            <summary>
              Looks up a localized string similar to or.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Outlining">
            <summary>
              Looks up a localized string similar to Outlining.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Over_colon">
            <summary>
              Looks up a localized string similar to Over:.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Overridden_By">
            <summary>
              Looks up a localized string similar to Overridden By.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Overrides_">
            <summary>
              Looks up a localized string similar to Overrides.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Package_install_failed_colon_0">
            <summary>
              Looks up a localized string similar to Package install failed: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Package_uninstall_failed_colon_0">
            <summary>
              Looks up a localized string similar to Package uninstall failed: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Parameter">
            <summary>
              Looks up a localized string similar to Parameter.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Parameters_colon1">
            <summary>
              Looks up a localized string similar to Parameters:.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Parameters_colon2">
            <summary>
              Looks up a localized string similar to Parameters:.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Parent_Rule_colon">
            <summary>
              Looks up a localized string similar to Parent Rule:.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Pascal_Case_Name">
            <summary>
              Looks up a localized string similar to Pascal Case Name.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Path_cannot_have_empty_filename">
            <summary>
              Looks up a localized string similar to Path cannot have empty filename.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Perform_editor_feature_analysis_in_external_process">
            <summary>
              Looks up a localized string similar to Perform editor _feature analysis in external process (experimental).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Pick_members">
            <summary>
              Looks up a localized string similar to Pick members.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.prefer_auto_properties">
            <summary>
              Looks up a localized string similar to prefer auto properties.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Prefer_braces">
            <summary>
              Looks up a localized string similar to Prefer braces.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Prefer_coalesce_expression">
            <summary>
              Looks up a localized string similar to Prefer coalesce expression.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Prefer_collection_initializer">
            <summary>
              Looks up a localized string similar to Prefer collection initializer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Prefer_colon">
            <summary>
              Looks up a localized string similar to Prefer:.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Prefer_deconstructed_variable_declaration">
            <summary>
              Looks up a localized string similar to Prefer deconstructed variable declaration.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Prefer_explicit_tuple_name">
            <summary>
              Looks up a localized string similar to Prefer explicit tuple name.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Prefer_framework_type">
            <summary>
              Looks up a localized string similar to Prefer framework type.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Prefer_inferred_anonymous_type_member_names">
            <summary>
              Looks up a localized string similar to Prefer inferred anonymous type member names.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Prefer_inferred_tuple_names">
            <summary>
              Looks up a localized string similar to Prefer inferred tuple element names.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Prefer_inlined_variable_declaration">
            <summary>
              Looks up a localized string similar to Prefer inlined variable declaration.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Prefer_local_function_over_anonymous_function">
            <summary>
              Looks up a localized string similar to Prefere local function over anonymous function.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Prefer_null_propagation">
            <summary>
              Looks up a localized string similar to Prefer null propagation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Prefer_object_initializer">
            <summary>
              Looks up a localized string similar to Prefer object initializer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Prefer_predefined_type">
            <summary>
              Looks up a localized string similar to Prefer predefined type.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Prefer_simple_default_expression">
            <summary>
              Looks up a localized string similar to Prefer simple &apos;default&apos; expression.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.prefer_throwing_properties">
            <summary>
              Looks up a localized string similar to prefer throwing properties.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Preference">
            <summary>
              Looks up a localized string similar to Preference.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Preview_method_signature_colon">
            <summary>
              Looks up a localized string similar to Preview method signature:.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Preview_pane">
            <summary>
              Looks up a localized string similar to Preview pane.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Preview_reference_changes">
            <summary>
              Looks up a localized string similar to Preview reference changes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Preview_unavailable">
            <summary>
              Looks up a localized string similar to Preview unavailable.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Project">
            <summary>
              Looks up a localized string similar to Project .
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Project_colon">
            <summary>
              Looks up a localized string similar to _Project:.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Project_colon_0_1_Use_the_dropdown_to_view_and_switch_to_other_projects_this_file_may_belong_to">
             <summary>
               Looks up a localized string similar to Project: {0} ({1})
            
            Use the dropdown to view and switch to other projects this file may belong to..
             </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Project_colon_0_Use_the_dropdown_to_view_and_switch_to_other_projects_this_file_may_belong_to">
             <summary>
               Looks up a localized string similar to Project: {0}
            
            Use the dropdown to view and switch to other projects this file may belong to..
             </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Project_loading_failed">
            <summary>
              Looks up a localized string similar to Project loading failed..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Project_Path_is_illegal">
            <summary>
              Looks up a localized string similar to Project Path is illegal.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Project_reference_to_0_in_project_1">
            <summary>
              Looks up a localized string similar to Project reference to &apos;{0}&apos; in project &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Project_References">
            <summary>
              Looks up a localized string similar to Project References.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Re_enable">
            <summary>
              Looks up a localized string similar to Re-enable.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Re_move">
            <summary>
              Looks up a localized string similar to Re_move.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Reference_to_0_in_project_1">
            <summary>
              Looks up a localized string similar to Reference to &apos;{0}&apos; in project &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Remarks_colon">
            <summary>
              Looks up a localized string similar to Remarks:.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Remove">
            <summary>
              Looks up a localized string similar to Remove.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Remove_0">
            <summary>
              Looks up a localized string similar to Remove {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Remove_item">
            <summary>
              Looks up a localized string similar to Remove item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Remove_naming_rule">
            <summary>
              Looks up a localized string similar to Remove naming rule.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Remove_suppressions">
            <summary>
              Looks up a localized string similar to Remove suppressions.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Remove_symbol_specification">
            <summary>
              Looks up a localized string similar to Remove symbol specification.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Reorder">
            <summary>
              Looks up a localized string similar to Reorder.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Required_Prefix_colon">
            <summary>
              Looks up a localized string similar to Required Prefix:.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Required_Style">
            <summary>
              Looks up a localized string similar to Required Style.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Required_Suffix_colon">
            <summary>
              Looks up a localized string similar to Required Suffix:.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Resolving_breakpoint_location">
            <summary>
              Looks up a localized string similar to Resolving breakpoint location....
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Restore">
            <summary>
              Looks up a localized string similar to _Restore.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Restore_0">
            <summary>
              Looks up a localized string similar to Restore {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Returns_colon">
            <summary>
              Looks up a localized string similar to Returns:.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Sample_Identifier_colon">
            <summary>
              Looks up a localized string similar to Sample Identifier:.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Search_found_no_results">
            <summary>
              Looks up a localized string similar to Search found no results.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Select_All">
            <summary>
              Looks up a localized string similar to _Select All.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Select_public_members_to_form_interface">
            <summary>
              Looks up a localized string similar to Select public _members to form interface.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Severity">
            <summary>
              Looks up a localized string similar to Severity.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Severity_colon">
            <summary>
              Looks up a localized string similar to Severity:.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Show_guides_for_code_level_constructs">
            <summary>
              Looks up a localized string similar to Show guides for code level constructs.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Show_guides_for_comments_and_preprocessor_regions">
            <summary>
              Looks up a localized string similar to Show guides for comments and preprocessor regions.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Show_guides_for_declaration_level_constructs">
            <summary>
              Looks up a localized string similar to Show guides for declaration level constructs.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Show_outlining_for_code_level_constructs">
            <summary>
              Looks up a localized string similar to Show outlining for code level constructs.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Show_outlining_for_comments_and_preprocessor_regions">
            <summary>
              Looks up a localized string similar to Show outlining for comments and preprocessor regions.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Show_outlining_for_declaration_level_constructs">
            <summary>
              Looks up a localized string similar to Show outlining for declaration level constructs.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Some_naming_rules_are_incomplete_Please_complete_or_remove_them">
            <summary>
              Looks up a localized string similar to Some naming rules are incomplete. Please complete or remove them..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Specification">
            <summary>
              Looks up a localized string similar to Specification.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Summary_colon">
            <summary>
              Looks up a localized string similar to Summary:.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Suppress_diagnostics">
            <summary>
              Looks up a localized string similar to Suppress diagnostics.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Suppressed">
            <summary>
              Looks up a localized string similar to Suppressed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Suppression_State">
            <summary>
              Looks up a localized string similar to Suppression State.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.SuppressionNotSupportedToolTip">
            <summary>
              Looks up a localized string similar to Suppression state is supported only for intellisense diagnostics, which are for the current solution snapshot. Switch to &apos;Intellisense&apos; diagnostics for suppression..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Symbol_Kinds_can_match_any">
            <summary>
              Looks up a localized string similar to Symbol Kinds (can match any).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Symbol_Specification">
            <summary>
              Looks up a localized string similar to Symbol Specification.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Symbol_Specification_colon">
            <summary>
              Looks up a localized string similar to Symbol Specification:.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Symbol_Specification_Title_colon">
            <summary>
              Looks up a localized string similar to Symbol Specification Title:.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Synchronize_0">
            <summary>
              Looks up a localized string similar to Synchronize {0}.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Synchronizing_with_0">
            <summary>
              Looks up a localized string similar to Synchronizing with {0}....
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.The_analyzer_assembly_0_has_changed_Diagnostics_may_be_incorrect_until_Visual_Studio_is_restarted">
            <summary>
              Looks up a localized string similar to The analyzer assembly &apos;{0}&apos; has changed. Diagnostics may be incorrect until Visual Studio is restarted..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.The_first_matching_top_level_Naming_Rule_is_used_by_default_when_naming_a_symbol_while_any_special_cases_are_handled_by_a_matching_child_rule">
            <summary>
              Looks up a localized string similar to The first matching top-level Naming Rule is used by default when naming a symbol, while any special cases are handled by a matching child rule..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.The_following_references_were_not_found_0_Please_locate_and_add_them_manually">
            <summary>
              Looks up a localized string similar to The following references were not found. {0}Please locate and add them manually..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.The_given_DocumentId_did_not_come_from_the_Visual_Studio_workspace">
            <summary>
              Looks up a localized string similar to The given DocumentId did not come from the Visual Studio workspace..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.This_item_cannot_be_deleted_because_it_is_used_by_an_existing_Naming_Rule">
            <summary>
              Looks up a localized string similar to This item cannot be deleted because it is used by an existing Naming Rule..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.This_workspace_does_not_support_updating_Visual_Basic_parse_options">
            <summary>
              Looks up a localized string similar to This workspace does not support updating Visual Basic parse options..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.This_workspace_only_supports_opening_documents_on_the_UI_thread">
            <summary>
              Looks up a localized string similar to This workspace only supports opening documents on the UI thread..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.To_see_what_caused_the_issue_please_try_below_1_Close_Visual_Studio_long_paragraph_follows">
             <summary>
               Looks up a localized string similar to To see what caused the issue, please try below.
            
            1. Close Visual Studio
            2. Open a Visual Studio Developer Command Prompt
            3. Set environment variable “TraceDesignTime” to true (set TraceDesignTime=true)
            4. Delete .vs directory/.suo file
            5. Restart VS from the command prompt you set the environment variable (devenv)
            6. Open the solution
            7. Check &apos;{0}&apos; and look for the failed tasks (FAILED).
             </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Try_the_preview_version_of_our_live_code_analysis_extension_which_provides_more_fixes_for_common_API_design_naming_performance_and_reliability_issues">
            <summary>
              Looks up a localized string similar to Try the preview version of our live code analysis extension, which provides more fixes for common API design, naming, performance, and reliability issues.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Type">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Type_Details_colon">
            <summary>
              Looks up a localized string similar to Type Details:.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.type_is_apparent_from_assignment_expression">
            <summary>
              Looks up a localized string similar to type is apparent from assignment expression.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Type_Parameters_colon">
            <summary>
              Looks up a localized string similar to Type Parameters:.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Unfortunately_a_process_used_by_Visual_Studio_has_encountered_an_unrecoverable_error_We_recommend_saving_your_work_and_then_closing_and_restarting_Visual_Studio">
            <summary>
              Looks up a localized string similar to Unfortunately, a process used by Visual Studio has encountered an unrecoverable error.  We recommend saving your work, and then closing and restarting Visual Studio..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Uninstall_0">
            <summary>
              Looks up a localized string similar to Uninstall &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Uninstalling_0">
            <summary>
              Looks up a localized string similar to Uninstalling &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Uninstalling_0_completed">
            <summary>
              Looks up a localized string similar to Uninstalling &apos;{0}&apos; completed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Uninstalling_0_failed_Additional_information_colon_1">
             <summary>
               Looks up a localized string similar to Uninstalling &apos;{0}&apos; failed.
            
            Additional information: {1}.
             </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Unknown_parameters">
            <summary>
              Looks up a localized string similar to &lt;Unknown Parameters&gt;.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Unknown_rename_type">
            <summary>
              Looks up a localized string similar to Unknown rename type.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Unknown1">
            <summary>
              Looks up a localized string similar to &lt;Unknown&gt;.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Unknown2">
            <summary>
              Looks up a localized string similar to &lt;Unknown&gt;.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Use_expression_body_for_accessors">
            <summary>
              Looks up a localized string similar to Use expression body for accessors.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Use_expression_body_for_constructors">
            <summary>
              Looks up a localized string similar to Use expression body for constructors.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Use_expression_body_for_indexers">
            <summary>
              Looks up a localized string similar to Use expression body for indexers.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Use_expression_body_for_methods">
            <summary>
              Looks up a localized string similar to Use expression body for methods.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Use_expression_body_for_operators">
            <summary>
              Looks up a localized string similar to Use expression body for operators.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Use_expression_body_for_properties">
            <summary>
              Looks up a localized string similar to Use expression body for properties.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Validating_breakpoint_location">
            <summary>
              Looks up a localized string similar to Validating breakpoint location....
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Variable_preferences_colon">
            <summary>
              Looks up a localized string similar to Variable preferences:.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Visual_Studio_has_suspended_some_advanced_features_to_improve_performance">
            <summary>
              Looks up a localized string similar to Visual Studio has suspended some advanced features to improve performance..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.VisualStudioWorkspace_TryApplyChanges_cannot_be_called_from_a_background_thread">
            <summary>
              Looks up a localized string similar to VisualStudioWorkspace.TryApplyChanges cannot be called from a background thread..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.When_generating_properties">
            <summary>
              Looks up a localized string similar to When generating properties:.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.When_inserting_properties_events_and_methods_place_them">
            <summary>
              Looks up a localized string similar to When inserting properties, events and methods, place them:.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.with_other_members_of_the_same_kind">
            <summary>
              Looks up a localized string similar to with other members of the same kind.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Word_Separator_colon">
            <summary>
              Looks up a localized string similar to Word Separator:.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.Yes">
            <summary>
              Looks up a localized string similar to Yes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.ServicesVSResources.You_must_select_at_least_one_member">
            <summary>
              Looks up a localized string similar to You must select at least one member..
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.SolutionEventMonitor">
            <summary>
            Monitors Visual Studio's UIContext for SolutionBuilding and notifies the GlobalOperationService.
            The intent is to suspend analysis of non-essential files for the duration of a build.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LanguageServices.VSPackage">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.VSPackage.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.LanguageServices.VSPackage.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.LangaugeServices.Telemetry.ProjectTelemetryIncrementalAnalyzerProvider">
            <summary>
            Creates an <see cref="T:Microsoft.CodeAnalysis.SolutionCrawler.IIncrementalAnalyzer"/> that collects basic information on <see cref="T:Microsoft.CodeAnalysis.Project"/> inputs
            and reports it to the <see cref="T:Microsoft.Internal.VisualStudio.Shell.Interop.IVsTelemetryService"/>.
            </summary>
            <remarks>
            This includes data such an source file counts, project, metadata, and analyzer reference counts, and so on.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.LangaugeServices.Telemetry.ProjectTelemetryIncrementalAnalyzerProvider.Analyzer.Cache">
            <summary>
            For a given <see cref="T:Microsoft.CodeAnalysis.ProjectId"/>, stores the most recent set of data reported to the
            telemetry service.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LangaugeServices.Telemetry.ProjectTelemetryIncrementalAnalyzerProvider.Analyzer.Cache.TryAddOrUpdate(Microsoft.CodeAnalysis.ProjectId,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds or updates the data for the <see cref="T:Microsoft.CodeAnalysis.Project"/> indicated by <paramref name="projectId"/>.
            </summary>
            <returns>
            True if the data was added or updated, false if the data matches what is already in the cache.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.LangaugeServices.Telemetry.ProjectTelemetryIncrementalAnalyzerProvider.Analyzer.Cache.Remove(Microsoft.CodeAnalysis.ProjectId)">
            <summary>
            Removes all data associated with <paramref name="projectId"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.LangaugeServices.Telemetry.ProjectTelemetryIncrementalAnalyzerProvider.Analyzer.AnalyzeProjectAsync(Microsoft.CodeAnalysis.Project,System.Boolean,Microsoft.CodeAnalysis.SolutionCrawler.InvocationReasons,System.Threading.CancellationToken)">
            <summary>
            Collects data from <paramref name="project"/> and reports it to the telemetry service.
            </summary>
            <remarks>
            Only sends data to the telemetry service when one of the collected data points changes, 
            not necessarily every time this code is called.
            </remarks>
        </member>
        <member name="T:Microsoft.CodeAnalysis.WorkspaceBackgroundWork">
            <summary>
            Specifies the type of work that the workspace should automatically do in the background.
            The workspace can automatically, asynchronously, parse documents in its solution, and can
            also automatically, asynchronously, produce compilations from those syntax trees, including
            any necessary metadata or compilation references.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ErrorReporting.WatsonExtensions.SetExtraParameters(Microsoft.VisualStudio.Telemetry.IFaultUtility,System.Exception)">
            <summary>
            This sets extra watson bucket parameters to make bucketting better
            in non fatal watson report
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.ErrorReporting.WatsonDisabled">
            <summary>
            Controls whether or not we actually report the failure.
            There are situations where we know we're in a bad state and any further reports are unlikely to be
            helpful, so we shouldn't send them.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.ErrorReporting.WatsonReporter.s_lastExceptionReported">
            <summary>
            hold onto last issue we reported. we use hash
            since exception callstack could be quite big
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.ErrorReporting.WatsonReporter.s_defaultCallback">
            <summary>
            The default callback to pass to <see cref="M:Microsoft.VisualStudio.Telemetry.TelemetrySessionExtensions.PostFault(Microsoft.VisualStudio.Telemetry.TelemetrySession,System.String,System.String,System.Exception,System.Func{Microsoft.VisualStudio.Telemetry.IFaultUtility,System.Int32})"/>.
            Returning "0" signals that we should send data to Watson; any other value will cancel the Watson report.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ErrorReporting.WatsonReporter.Report(System.Exception)">
            <summary>
            Report Non-Fatal Watson
            </summary>
            <param name="exception">Exception that triggered this non-fatal error</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ErrorReporting.WatsonReporter.Report(System.String,System.Exception)">
            <summary>
            Report Non-Fatal Watson
            </summary>
            <param name="description">any description you want to save with this watson report</param>
            <param name="exception">Exception that triggered this non-fatal error</param>
        </member>
        <member name="M:Microsoft.CodeAnalysis.ErrorReporting.WatsonReporter.Report(System.String,System.Exception,System.Func{Microsoft.VisualStudio.Telemetry.IFaultUtility,System.Int32})">
            <summary>
            Report Non-Fatal Watson
            </summary>
            <param name="description">any description you want to save with this watson report</param>
            <param name="exception">Exception that triggered this non-fatal error</param>
            <param name="callback">Callback to include extra data with the NFW. Note that we always collect
            a dump of the current process, but this can be used to add further information or files to the
            CAB.</param>
        </member>
        <member name="T:Microsoft.CodeAnalysis.InternalUtilities.ConcurrentLruCache`2">
            <summary>
            Cache with a fixed size that evicts the least recently used members.
            Thread-safe.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.InternalUtilities.ConcurrentLruCache`2.#ctor(System.Collections.Generic.KeyValuePair{`0,`1}[])">
            <summary>
            Create cache from an array. The cache capacity will be the size
            of the array. All elements of the array will be added to the 
            cache. If any duplicate keys are found in the array a
            <see cref="T:System.ArgumentException"/> will be thrown.
            </summary>
        </member>
        <member name="P:Microsoft.CodeAnalysis.InternalUtilities.ConcurrentLruCache`2.TestingEnumerable">
            <summary>
            For testing. Very expensive.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.InternalUtilities.ConcurrentLruCache`2.UnsafeEvictLastNode">
            <summary>
            Expects non-empty cache. Does not lock.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.InternalUtilities.ConcurrentLruCache`2.UnsafeAdd(`0,`1,System.Boolean)">
            <summary>
            Doesn't lock.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.InternalUtilities.ConcurrentLruCache`2.UnsafeTryGetValue(`0,`1@)">
            <summary>
            Doesn't lock.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Remote.DirectStream.ClientDirectStream">
            <summary>
            Direct stream between server and client to pass around big chunk of data
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Remote.Extensions.ServerDirectStream">
            <summary>
            Direct stream between service hub server and client to pass around big chunk of data.
            
            This stream should be only consumed through JsonRpc.InvokeAsync
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.ShadowCopyAnalyzerAssemblyLoader._baseDirectory">
            <summary>
            The base directory for shadow copies. Each instance of
            <see cref="T:Microsoft.CodeAnalysis.ShadowCopyAnalyzerAssemblyLoader"/> gets its own
            subdirectory under this directory. This is also the starting point
            for scavenge operations.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.ShadowCopyAnalyzerAssemblyLoader._shadowCopyDirectory">
            <summary>
            The directory where this instance of <see cref="T:Microsoft.CodeAnalysis.ShadowCopyAnalyzerAssemblyLoader"/>
            will shadow-copy assemblies.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.ShadowCopyAnalyzerAssemblyLoader._assemblyDirectoryId">
            <summary>
            Used to generate unique names for per-assembly directories.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Debugging.CustomDebugInfoConstants">
            <summary>
            Constants for producing and consuming streams of binary custom debug info.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Debugging.CustomDebugInfoEncoder.ToArray">
            <exception cref="T:System.InvalidOperationException">More than <see cref="F:System.Byte.MaxValue"/> records added.</exception>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Debugging.CustomDebugInfoKind">
            <summary>
            The kinds of custom debug info that we know how to interpret.
            The values correspond to possible values of the "kind" byte
            in the record header.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Debugging.CustomDebugInfoKind.UsingGroups">
            <summary>
            C# only. Encodes the sizes of using groups that are applicable to the method.
            The actual import strings are stored separately trhu ISymUnmanagedWriter.UsingNamespace.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Debugging.CustomDebugInfoKind.ForwardMethodInfo">
            <summary>
            C# only. Indicates that per-method debug information (import strings) is stored on another method, 
            whose token is specified.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Debugging.CustomDebugInfoKind.ForwardModuleInfo">
            <summary>
            C# only. Indicates that per-module debug information (assembly reference aliases) is stored on another method, 
            whose token is specified.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Debugging.CustomDebugInfoKind.StateMachineHoistedLocalScopes">
            <summary>
            C# only. Specifies local scopes for state machine hoisted local variables.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Debugging.CustomDebugInfoKind.StateMachineTypeName">
            <summary>
            C# and VB. The name of the state machine type. Emitted for async and iterator kick-off methods.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Debugging.CustomDebugInfoKind.DynamicLocals">
            <summary>
            C# only. Dynamic flags for local variables and constants.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Debugging.CustomDebugInfoKind.EditAndContinueLocalSlotMap">
            <summary>
            C# and VB. Encodes EnC local variable slot map.
            See https://github.com/dotnet/corefx/blob/master/src/System.Reflection.Metadata/specs/PortablePdb-Metadata.md#EditAndContinueLocalSlotMap.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Debugging.CustomDebugInfoKind.EditAndContinueLambdaMap">
            <summary>
            C# and VB. Encodes EnC lambda map.
            See https://github.com/dotnet/corefx/blob/master/src/System.Reflection.Metadata/specs/PortablePdb-Metadata.md#EditAndContinueLambdaAndClosureMap.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Debugging.CustomDebugInfoKind.TupleElementNames">
            <summary>
            C# and VB. Tuple element names for local variables and constants.
            </summary>
        </member>
        <member name="T:Microsoft.CodeAnalysis.Debugging.CustomDebugInfoReader">
            <summary>
            A collection of utility method for consuming custom debug info from a PDB.
            </summary>
            <remarks>
            This is not a public API, so we're just going to let bad offsets fail on their own.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Debugging.CustomDebugInfoReader.ReadGlobalHeader(System.Byte[],System.Int32@,System.Byte@,System.Byte@)">
            <summary>
            This is the first header in the custom debug info blob.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Debugging.CustomDebugInfoReader.ReadRecordHeader(System.Byte[],System.Int32@,System.Byte@,Microsoft.CodeAnalysis.Debugging.CustomDebugInfoKind@,System.Int32@,System.Int32@)">
            <summary>
            After the global header (see <see cref="M:Microsoft.CodeAnalysis.Debugging.CustomDebugInfoReader.ReadGlobalHeader(System.Byte[],System.Int32@,System.Byte@,System.Byte@)"/> comes list of custom debug info record.
            Each record begins with a standard header.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Debugging.CustomDebugInfoReader.TryGetCustomDebugInfoRecord(System.Byte[],Microsoft.CodeAnalysis.Debugging.CustomDebugInfoKind)">
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Debugging.CustomDebugInfoReader.GetCustomDebugInfoRecords(System.Byte[])">
            <remarks>
            Exposed for <see cref="T:Roslyn.Test.PdbUtilities.PdbToXmlConverter"/>.
            </remarks>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Debugging.CustomDebugInfoReader.DecodeUsingRecord(System.Collections.Immutable.ImmutableArray{System.Byte})">
            <summary>
            For each namespace declaration enclosing a method (innermost-to-outermost), there is a count
            of the number of imports in that declaration.
            </summary>
            <remarks>
            There's always at least one entry (for the global namespace).
            Exposed for <see cref="T:Roslyn.Test.PdbUtilities.PdbToXmlConverter"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Debugging.CustomDebugInfoReader.DecodeForwardRecord(System.Collections.Immutable.ImmutableArray{System.Byte})">
            <summary>
            This indicates that further information can be obtained by looking at the custom debug
            info of another method (specified by token).
            </summary>
            <remarks>
            Appears when multiple method would otherwise have identical using records (see <see cref="M:Microsoft.CodeAnalysis.Debugging.CustomDebugInfoReader.DecodeUsingRecord(System.Collections.Immutable.ImmutableArray{System.Byte})"/>).
            Exposed for <see cref="T:Roslyn.Test.PdbUtilities.PdbToXmlConverter"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Debugging.CustomDebugInfoReader.DecodeForwardToModuleRecord(System.Collections.Immutable.ImmutableArray{System.Byte})">
            <summary>
            This indicates that further information can be obtained by looking at the custom debug
            info of another method (specified by token).
            </summary>
            <remarks>
            Appears when there are extern aliases and edit-and-continue is disabled.
            Exposed for <see cref="T:Roslyn.Test.PdbUtilities.PdbToXmlConverter"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Debugging.CustomDebugInfoReader.DecodeStateMachineHoistedLocalScopesRecord(System.Collections.Immutable.ImmutableArray{System.Byte})">
            <summary>
            Scopes of state machine hoisted local variables.
            </summary>
            <remarks>
            Exposed for <see cref="T:Roslyn.Test.PdbUtilities.PdbToXmlConverter"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Debugging.CustomDebugInfoReader.DecodeForwardIteratorRecord(System.Collections.Immutable.ImmutableArray{System.Byte})">
            <summary>
            Indicates that this method is the iterator state machine for the method named in the record.
            </summary>
            <remarks>
            Appears when are iterator methods.
            Exposed for <see cref="T:Roslyn.Test.PdbUtilities.PdbToXmlConverter"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Debugging.CustomDebugInfoReader.DecodeDynamicLocalsRecord(System.Collections.Immutable.ImmutableArray{System.Byte})">
            <summary>
            Does for locals what System.Runtime.CompilerServices.DynamicAttribute does for parameters, return types, and fields.
            In particular, indicates which occurrences of <see cref="T:System.Object"/> in the signature are really dynamic.
            </summary>
            <remarks>
            Appears when there are dynamic locals.
            Exposed for <see cref="T:Roslyn.Test.PdbUtilities.PdbToXmlConverter"/>.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Bad data.</exception>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Debugging.CustomDebugInfoReader.DecodeTupleElementNamesRecord(System.Collections.Immutable.ImmutableArray{System.Byte})">
            <summary>
            Tuple element names for locals.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Debugging.CustomDebugInfoReader.ReadRawRecordBody(System.Byte[],System.Int32@,System.Int32,System.Collections.Immutable.ImmutableArray{System.Byte}@)">
            <summary>
            Returns the raw bytes of a record.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Debugging.CustomDebugInfoReader.SkipRecord(System.Byte[],System.Int32@,System.Int32)">
            <summary>
            Skips past a record.
            </summary>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Debugging.CustomDebugInfoReader.GetCSharpGroupedImportStrings``1(System.Int32,``0,System.Func{System.Int32,``0,System.Byte[]},System.Func{System.Int32,``0,System.Collections.Immutable.ImmutableArray{System.String}},System.Collections.Immutable.ImmutableArray{System.String}@)">
            <summary>
            Get the import strings for a given method, following forward pointers as necessary.
            </summary>
            <returns>
            For each namespace enclosing the method, a list of import strings, innermost to outermost.
            There should always be at least one entry, for the global namespace.
            </returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Debugging.CustomDebugInfoReader.GetVisualBasicImportStrings``1(System.Int32,``0,System.Func{System.Int32,``0,System.Collections.Immutable.ImmutableArray{System.String}})">
            <summary>
            Get the import strings for a given method, following forward pointers as necessary.
            </summary>
            <returns>
            A list of import strings.  There should always be at least one entry, for the global namespace.
            </returns>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Debugging.CustomDebugInfoReader.TryParseCSharpImportString(System.String,System.String@,System.String@,System.String@,Microsoft.CodeAnalysis.Debugging.ImportTargetKind@)">
            <summary>
            Parse a string representing a C# using (or extern alias) directive.
            </summary>
            <remarks>
            <![CDATA[
            For C#:
             "USystem" -> <namespace name="System" />
             "AS USystem" -> <alias name="S" target="System" kind="namespace" />
             "AC TSystem.Console" -> <alias name="C" target="System.Console" kind="type" />
             "AS ESystem alias" -> <alias name="S" qualifier="alias" target="System" kind="type" />
             "XOldLib" -> <extern alias="OldLib" />
             "ZOldLib assembly" -> <externinfo name="OldLib" assembly="assembly" />
             "ESystem alias" -> <namespace qualifier="alias" name="System" />
             "TSystem.Math" -> <type name="System.Math" />
            ]]>
            </remarks>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Debugging.CustomDebugInfoReader.TryParseVisualBasicImportString(System.String,System.String@,System.String@,Microsoft.CodeAnalysis.Debugging.ImportTargetKind@,Microsoft.CodeAnalysis.Debugging.VBImportScopeKind@)">
            <summary>
            Parse a string representing a VB import statement.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="import"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Format of <paramref name="import"/> is not valid.</exception>
        </member>
        <member name="M:Microsoft.CodeAnalysis.Debugging.CustomDebugInfoReader.ReadUtf8String(System.Collections.Immutable.ImmutableArray{System.Byte},System.Int32@)">
            <summary>
            Read UTF8 string with null terminator.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Debugging.ImportTargetKind.Namespace">
            <summary>
            C# or VB namespace import.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Debugging.ImportTargetKind.Type">
            <summary>
            C# or VB type import.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Debugging.ImportTargetKind.NamespaceOrType">
            <summary>
            VB namespace or type alias target (not specified).
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Debugging.ImportTargetKind.Assembly">
            <summary>
            C# extern alias.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Debugging.ImportTargetKind.XmlNamespace">
            <summary>
            VB XML import.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Debugging.ImportTargetKind.MethodToken">
            <summary>
            VB forwarding information (i.e. another method has the imports for this one).
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Debugging.ImportTargetKind.CurrentNamespace">
            <summary>
            VB containing namespace (not an import).
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Debugging.ImportTargetKind.DefaultNamespace">
            <summary>
            VB root namespace (not an import).
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Debugging.ImportTargetKind.Defunct">
            <summary>
            A kind that is no longer used.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Debugging.StateMachineHoistedLocalScope.StartOffset">
            <summary>
            The offset of the first operation in the scope.
            </summary>
        </member>
        <member name="F:Microsoft.CodeAnalysis.Debugging.StateMachineHoistedLocalScope.EndOffset">
            <summary>
            The offset of the first operation outside of the scope, or the method body length.
            If zero then <see cref="F:Microsoft.CodeAnalysis.Debugging.StateMachineHoistedLocalScope.StartOffset"/> is also zero and the slot represents a synthesized local.
            </summary>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
