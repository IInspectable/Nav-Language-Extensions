<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Runtime" #>
<#@ assembly name="EnvDte" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<#@ output extension=".cs" #>
<#

    var serviceProvider = Host as IServiceProvider;
    var visualStudio    = serviceProvider.GetService(typeof(EnvDTE.DTE)) as EnvDTE.DTE;

	var project = visualStudio.Solution.FindProjectItem(Host.TemplateFile)
                                       .ContainingProject as EnvDTE.Project;
 
	var classMap=FindAllDerivedTypes(project, "Pharmatechnik.Nav.Language.CodeAnalysis.Annotation.NavTaskAnnotation");
    var baseClass=classMap.First();
#>
namespace Pharmatechnik.Nav.Language.CodeAnalysis.Annotation {

    public interface INavTaskAnnotationVisitor {
<#
    foreach(var codeClass in classMap) {
        var className  = codeClass.Name;
        var methodName= "Visit" + className;
        var paramName = className.Substring(0, 1).ToLower() + className.Substring(1, className.Length-1);
        WriteLine("        void " + methodName + "("+ className + " " + paramName + ");");	
    }
#>
    }

    public interface INavTaskAnnotationVisitor<T> {
<#
    foreach(var codeClass in classMap) {
        var className  = codeClass.Name;
        var methodName= "Visit" + className;
        var paramName = className.Substring(0, 1).ToLower() + className.Substring(1, className.Length-1);
        WriteLine("        T " + methodName + "("+ className + " " + paramName + ");");	
    }
#>
    }

<#
    foreach(var codeClass in classMap) {
        var className  = codeClass.Name;
        var methodName= "Visit" + className;
        var paramName = className.Substring(0, 1).ToLower() + className.Substring(1, className.Length-1);
        var modifier=codeClass==baseClass?"virtual":"override";
#>

    partial class <#=codeClass.Name#> {

        internal <#=modifier#> void Accept(INavTaskAnnotationVisitor visitor) {
            visitor.<#=methodName#>(this);
        }

        internal <#=modifier#> T Accept<T>(INavTaskAnnotationVisitor<T> visitor) {
            return visitor.<#=methodName#>(this);
        }
    }
<#
    }
#>

    public abstract class NavTaskAnnotationVisitor: INavTaskAnnotationVisitor {

        public void Visit(NavTaskAnnotation annotation){
            annotation.Accept(this);
        }             

        protected virtual void DefaultVisit(NavTaskAnnotation annotation) {
        }

<#
    foreach(var codeClass in classMap) {
        var className  = codeClass.Name;
        var methodName= "Visit" + className;
        var paramName = className.Substring(0, 1).ToLower() + className.Substring(1, className.Length-1);
#>
		public virtual void <#=methodName#>(<#=className#> <#=paramName#>) {
            DefaultVisit(<#=paramName#>);
        }

<#
    }
#>
        }

        public abstract class NavTaskAnnotationVisitor<T>: INavTaskAnnotationVisitor<T> {

        public T Visit(NavTaskAnnotation annotation){
            return annotation.Accept(this);
        }             

        protected virtual T DefaultVisit(NavTaskAnnotation annotation) {
            return default(T);
        }

<#
    foreach(var codeClass in classMap) {
        var className  = codeClass.Name;
        var methodName= "Visit" + className;
        var paramName = className.Substring(0, 1).ToLower() + className.Substring(1, className.Length-1);
#>
		public virtual T <#=methodName#>(<#=className#> <#=paramName#>) {
            return DefaultVisit(<#=paramName#>);
        }

<#
    }
#>
    }
}
<#+
	public List<EnvDTE.CodeClass> FindAllDerivedTypes(EnvDTE.Project project, string fullyQualifiedClassName) {
		var namespaces = GetAllNamespaces(project);
		   					
        EnvDTE.CodeClass baseClass=null;

		foreach( var ns in namespaces) {
			foreach(EnvDTE.CodeElement codeElem in ns.Children) {
				if (codeElem.Kind != EnvDTE.vsCMElement.vsCMElementClass) {
                    continue;
                }
				var codeClass=(EnvDTE.CodeClass)codeElem;
			
				if(codeClass.IsAbstract) {
					continue;
				}

                if(codeClass.FullName==fullyQualifiedClassName){
                    baseClass=codeClass;
                    break;
                }																
			}
		}

        var classMap=new List<EnvDTE.CodeClass>();

        if(baseClass==null){
            return classMap;
        }
        
        classMap.Add(baseClass);

        foreach( var ns in namespaces) {
			foreach(EnvDTE.CodeElement codeElem in ns.Children) {
				if (codeElem.Kind != EnvDTE.vsCMElement.vsCMElementClass) {
                    continue;
                }
				var codeClass=(EnvDTE.CodeClass)codeElem;
					
                if(!IsDerivedFrom(codeClass, baseClass) ){
                    continue;
                }

                if(codeClass.IsAbstract) {
                    classMap.RemoveAll(c => c.FullName==codeClass.FullName);       
					continue;
				}

                if(!classMap.Any( c => c.FullName==codeClass.FullName)) {
                    classMap.Add(codeClass);
                }				
			}
		}

		return classMap;
	}

    public bool IsDerivedFrom(EnvDTE.CodeClass cd, EnvDTE.CodeClass baseClass) {
		foreach(EnvDTE.CodeElement canditate in cd.Bases) {

            if (canditate.Kind != EnvDTE.vsCMElement.vsCMElementClass) {
                continue; 
            }

            var canditateClass=(EnvDTE.CodeClass)canditate;

            if(canditateClass.FullName==baseClass.FullName){
                return true;
            }
            return IsDerivedFrom(canditateClass, baseClass);
			
		}
		return false;
	}

	

	public List<EnvDTE.CodeNamespace> GetAllNamespaces(EnvDTE.Project project){
		var namespaces = new List<EnvDTE.CodeNamespace>();

		foreach(EnvDTE.ProjectItem item in GetProjectItemsRecursively(project.ProjectItems)) {

			if (item.FileCodeModel == null) {
				continue;
			}

			foreach(EnvDTE.CodeElement elem in item.FileCodeModel.CodeElements) {

				if (elem.Kind == EnvDTE.vsCMElement.vsCMElementNamespace) {
					namespaces.Add((EnvDTE.CodeNamespace)elem);
				}
			}
		}

		return namespaces;
	}

	public List<EnvDTE.ProjectItem> GetProjectItemsRecursively(EnvDTE.ProjectItems items) {

		var ret = new List<EnvDTE.ProjectItem>();

		if (items == null) {
			return ret;
		}

		foreach(EnvDTE.ProjectItem item in items) {
	
		  ret.Add(item);
	
		  ret.AddRange(GetProjectItemsRecursively(item.ProjectItems));
	
		}
	
		return ret;
	}
#>